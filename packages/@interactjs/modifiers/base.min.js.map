{
	"version": 3,
	"sources": [
		"base.ts"
	],
	"names": [
		"Modification",
		"makeModifier",
		"module",
		"name",
		"defaults",
		"methods",
		"start",
		"set",
		"beforeEnd",
		"stop",
		"modifier",
		"_options",
		"options",
		"enabled",
		"prop",
		"m",
		"enable",
		"disable",
		"_defaults",
		"_methods",
		"addEventModifiers",
		"iEvent",
		"interaction",
		"modification",
		"result",
		"modifiers",
		"eventProps",
		"modifiersBase",
		"id",
		"install",
		"scope",
		"perAction",
		"listeners",
		"[object Object]",
		"arg",
		"coords",
		"page",
		"edges",
		"applyToInteraction",
		"setAndApply",
		"interactions:action-start",
		"interactions:action-move",
		"interactions:action-end",
		"restoreInteractionCoords",
		"before"
	],
	"mappings": "OAEOA,MAAkB,+BAwFlB,SAASC,aAKdC,EACAC,GAEA,MAAMC,SAAEA,GAAaF,EACfG,EAAU,CACdC,MAAOJ,EAAOI,MACdC,IAAKL,EAAOK,IACZC,UAAWN,EAAOM,UAClBC,KAAMP,EAAOO,MAGTC,EAAYC,IAChB,MAAMC,EAAqBD,GAAY,GAEvCC,EAAQC,SAA8B,IAApBD,EAAQC,QAG1B,IAAK,MAAMC,KAAQV,EACXU,KAAQF,IACZA,EAAQE,GAAQV,EAASU,IAI7B,MAAMC,EAAqC,CACzCH,QAAAA,EACAP,QAAAA,EACAF,KAAAA,EACAa,SAEE,OADAJ,EAAQC,SAAU,EACXE,GAETE,UAEE,OADAL,EAAQC,SAAU,EACXE,IAIX,OAAOA,GAST,OANIZ,GAAwB,iBAATA,IAEjBO,EAASQ,UAAYd,EACrBM,EAASS,SAAWd,GAGfK,SAGF,SAASU,mBAAmBC,OAAEA,EAAQC,aAAeC,cAAcC,OAAEA,MAItEA,IACFH,EAAOI,UAAYD,EAAOE,YAI9B,MAAMC,EAAiC,CACrCC,GAAI,iBACJC,QAASC,GACPA,EAAM1B,SAAS2B,UAAUN,UAAY,IAEvCO,UAAW,CACTC,oBAAuBX,YAAAA,IACrBA,EAAYC,aAAe,IAAIvB,EAAasB,IAG9CW,mCAAoCC,GAClC,MAAMX,aAAEA,GAAiBW,EAAIZ,YAE7BC,EAAajB,MAAM4B,EAAKA,EAAIZ,YAAYa,OAAO7B,MAAM8B,MACrDF,EAAIZ,YAAYe,MAAQd,EAAac,MACrCd,EAAae,mBAAmBJ,IAGlCD,kCAAmCC,GAAOA,OAAAA,EAAIZ,YAAYC,aAAagB,YAAYL,IAEnFD,iCAAkCC,GAAOA,OAAAA,EAAIZ,YAAYC,aAAaf,UAAU0B,IAEhFM,4BAA6BpB,kBAC7BqB,2BAA4BrB,kBAC5BsB,0BAA2BtB,kBAE3Ba,kCAAmCC,GAAOA,OAAAA,EAAIZ,YAAYC,aAAaoB,yBAAyBT,IAChGD,iCAAkCC,GAAOA,OAAAA,EAAIZ,YAAYC,aAAaoB,yBAAyBT,IAE/FD,oBAAqBC,GAAOA,OAAAA,EAAIZ,YAAYC,aAAad,KAAKyB,KAEhEU,OAAQ,CAAC,2BAGIjB",
	"sourcesContent": [
		"import * as Interact from '@interactjs/types/index'\n\nimport Modification from './Modification'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    modification?: Modification\n  }\n}\n\ndeclare module '@interactjs/core/InteractEvent' {\n  interface InteractEvent {\n    modifiers?: Array<{\n      name: string\n      [key: string]: any\n    }>\n  }\n}\n\ndeclare module '@interactjs/core/defaultOptions' {\n  interface PerActionDefaults {\n    modifiers?: Modifier[]\n  }\n}\n\nexport interface Modifier<\n  Defaults = any,\n  State extends ModifierState = any,\n  Name extends string = any\n> {\n  options?: Defaults\n  methods: {\n    start?: (arg: ModifierArg<State>) => void\n    set: (arg: ModifierArg<State>) => void\n    beforeEnd?: (arg: ModifierArg<State>) => Interact.Point | void\n    stop?: (arg: ModifierArg<State>) => void\n  }\n  name?: Name\n  enable: () => Modifier<Defaults, State, Name>\n  disable: () => Modifier<Defaults, State, Name>\n}\n\nexport type ModifierState<\n  Defaults = {},\n  StateProps extends { [prop: string]: any } = {},\n  Name extends string = any\n> = {\n  options: Defaults\n  methods?: Modifier<Defaults>['methods']\n  index?: number\n  name?: Name\n} & StateProps\n\nexport interface ModifierArg<State extends ModifierState = ModifierState> {\n  interaction: Interact.Interaction\n  interactable: Interact.Interactable\n  phase: Interact.EventPhase\n  rect: Interact.FullRect\n  edges: Interact.EdgeOptions\n  state?: State\n  element: Interact.Element\n  pageCoords?: Interact.Point\n  prevCoords?: Interact.Point\n  prevRect?: Interact.FullRect\n  coords?: Interact.Point\n  startOffset?: Interact.Rect\n  preEnd?: boolean\n}\n\nexport interface ModifierModule<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n> {\n  defaults?: Defaults\n  start? (arg: ModifierArg<State>): void\n  set? (arg: ModifierArg<State>): any\n  beforeEnd? (arg: ModifierArg<State>): Interact.Point | void\n  stop? (arg: ModifierArg<State>): void\n}\n\nexport interface ModifierFunction <\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string,\n> {\n  (_options?: Partial<Defaults>): Modifier<Defaults, State, Name>\n  _defaults: Defaults\n  _methods: ModifierModule<Defaults, State>\n}\n\nexport function makeModifier<\n  Defaults extends { enabled?: boolean },\n  State extends ModifierState,\n  Name extends string\n> (\n  module: ModifierModule<Defaults, State>,\n  name?: Name,\n) {\n  const { defaults } = module\n  const methods = {\n    start: module.start,\n    set: module.set,\n    beforeEnd: module.beforeEnd,\n    stop: module.stop,\n  }\n\n  const modifier = (_options?: Partial<Defaults>) => {\n    const options: Defaults = (_options || {}) as Defaults\n\n    options.enabled = options.enabled !== false\n\n    // add missing defaults to options\n    for (const prop in defaults) {\n      if (!(prop in options)) {\n        options[prop] = defaults[prop]\n      }\n    }\n\n    const m: Modifier<Defaults, State, Name> = {\n      options,\n      methods,\n      name,\n      enable: () => {\n        options.enabled = true\n        return m\n      },\n      disable: () => {\n        options.enabled = false\n        return m\n      },\n    }\n\n    return m\n  }\n\n  if (name && typeof name === 'string') {\n    // for backwrads compatibility\n    modifier._defaults = defaults\n    modifier._methods = methods\n  }\n\n  return modifier\n}\n\nexport function addEventModifiers ({ iEvent, interaction: { modification: { result } } }: {\n  iEvent: Interact.InteractEvent<Interact.ActionName, Interact.EventPhase>\n  interaction: Interact.Interaction\n}) {\n  if (result) {\n    iEvent.modifiers = result.eventProps\n  }\n}\n\nconst modifiersBase: Interact.Plugin = {\n  id: 'modifiers/base',\n  install: scope => {\n    scope.defaults.perAction.modifiers = []\n  },\n  listeners: {\n    'interactions:new': ({ interaction }) => {\n      interaction.modification = new Modification(interaction)\n    },\n\n    'interactions:before-action-start': arg => {\n      const { modification } = arg.interaction\n\n      modification.start(arg, arg.interaction.coords.start.page)\n      arg.interaction.edges = modification.edges\n      modification.applyToInteraction(arg)\n    },\n\n    'interactions:before-action-move': arg => arg.interaction.modification.setAndApply(arg),\n\n    'interactions:before-action-end': arg => arg.interaction.modification.beforeEnd(arg),\n\n    'interactions:action-start': addEventModifiers,\n    'interactions:action-move': addEventModifiers,\n    'interactions:action-end': addEventModifiers,\n\n    'interactions:after-action-start': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n    'interactions:after-action-move': arg => arg.interaction.modification.restoreInteractionCoords(arg),\n\n    'interactions:stop': arg => arg.interaction.modification.stop(arg),\n  },\n  before: ['actions'],\n}\n\nexport default modifiersBase\n"
	]
}