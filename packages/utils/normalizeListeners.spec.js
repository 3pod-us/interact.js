import test from '@interactjs/_dev/test/test';
import normalizeListeners from './normalizeListeners';
test('utils/normalizeListeners', t => {
    const a = () => { };
    const b = () => { };
    const c = () => { };
    t.deepEqual(normalizeListeners('type1', a), {
        type1: [a],
    }, 'single type, single listener function');
    t.deepEqual(normalizeListeners('type1 type2', a), {
        type1: [a],
        type2: [a],
    }, 'multiple types, single listener function');
    t.deepEqual(normalizeListeners('type1 type2', a), normalizeListeners(['type1', 'type2'], a), 'array of types equivalent to space separated string');
    t.deepEqual(normalizeListeners('type1', [a, b]), {
        type1: [a, b],
    }, 'single type, multiple listener functions');
    t.deepEqual(normalizeListeners('prefix', { _1: [a, b], _2: [b, c] }), {
        prefix_1: [a, b],
        prefix_2: [b, c],
    }, 'single type prefix, object of { suffix: [fn, ...] }');
    t.deepEqual(normalizeListeners('prefix1 prefix2', [{ _1: [a, b], _2: [b, c] }]), {
        prefix1_1: [a, b],
        prefix1_2: [b, c],
        prefix2_1: [a, b],
        prefix2_2: [b, c],
    }, 'multiple type prefixes, single length array of { suffix: [fn, ...] }');
    t.deepEqual(normalizeListeners({ _1: [a, b], _2: [b, c] }), {
        _1: [a, b],
        _2: [b, c],
    }, 'object of { suffix: [fn, ...] } as type arg');
    t.deepEqual(normalizeListeners({ '_1 _2': [a, b], _3: [b, c] }), {
        _1: [a, b],
        _2: [a, b],
        _3: [b, c],
    }, 'object of { "suffix1 suffix2": [fn, ...], ... } as type arg');
    t.deepEqual(normalizeListeners('prefix', { '_1 _2': [a, b], _3: [b, c] }), {
        prefix_1: [a, b],
        prefix_2: [a, b],
        prefix_3: [b, c],
    }, 'single type prefix, object of { "suffix1 suffix2": [fn, ...], ... }');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplTGlzdGVuZXJzLnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub3JtYWxpemVMaXN0ZW5lcnMuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLGtCQUFrQixNQUFNLHNCQUFzQixDQUFBO0FBRXJELElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUNuQyxNQUFNLENBQUMsR0FBRyxHQUFHLEVBQUUsR0FBRSxDQUFDLENBQUE7SUFDbEIsTUFBTSxDQUFDLEdBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxDQUFBO0lBQ2xCLE1BQU0sQ0FBQyxHQUFHLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQTtJQUVsQixDQUFDLENBQUMsU0FBUyxDQUNULGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFDOUI7UUFDRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDWCxFQUNELHVDQUF1QyxDQUFDLENBQUE7SUFFMUMsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDLEVBQ3BDO1FBQ0UsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ1YsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ1gsRUFDRCwwQ0FBMEMsQ0FBQyxDQUFBO0lBRTdDLENBQUMsQ0FBQyxTQUFTLENBQ1Qsa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxFQUNwQyxrQkFBa0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsRUFDekMscURBQXFELENBQUMsQ0FBQTtJQUV4RCxDQUFDLENBQUMsU0FBUyxDQUNULGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUNuQztRQUNFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDZCxFQUNELDBDQUEwQyxDQUFDLENBQUE7SUFFN0MsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDeEQ7UUFDRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDakIsRUFDRCxxREFBcUQsQ0FBQyxDQUFBO0lBRXhELENBQUMsQ0FBQyxTQUFTLENBQ1Qsa0JBQWtCLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQ25FO1FBQ0UsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNqQixTQUFTLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakIsU0FBUyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNsQixFQUNELHNFQUFzRSxDQUFDLENBQUE7SUFFekUsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUM5QztRQUNFLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDVixFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ1gsRUFDRCw2Q0FBNkMsQ0FBQyxDQUFBO0lBRWhELENBQUMsQ0FBQyxTQUFTLENBQ1Qsa0JBQWtCLENBQUMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDbkQ7UUFDRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ1YsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNWLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDWCxFQUNELDZEQUE2RCxDQUFDLENBQUE7SUFFaEUsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDN0Q7UUFDRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLFFBQVEsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsUUFBUSxFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUNqQixFQUNELHFFQUFxRSxDQUFDLENBQUE7SUFFeEUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCBub3JtYWxpemVMaXN0ZW5lcnMgZnJvbSAnLi9ub3JtYWxpemVMaXN0ZW5lcnMnXG5cbnRlc3QoJ3V0aWxzL25vcm1hbGl6ZUxpc3RlbmVycycsIHQgPT4ge1xuICBjb25zdCBhID0gKCkgPT4ge31cbiAgY29uc3QgYiA9ICgpID0+IHt9XG4gIGNvbnN0IGMgPSAoKSA9PiB7fVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycygndHlwZTEnLCBhKSxcbiAgICB7XG4gICAgICB0eXBlMTogW2FdLFxuICAgIH0sXG4gICAgJ3NpbmdsZSB0eXBlLCBzaW5nbGUgbGlzdGVuZXIgZnVuY3Rpb24nKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycygndHlwZTEgdHlwZTInLCBhKSxcbiAgICB7XG4gICAgICB0eXBlMTogW2FdLFxuICAgICAgdHlwZTI6IFthXSxcbiAgICB9LFxuICAgICdtdWx0aXBsZSB0eXBlcywgc2luZ2xlIGxpc3RlbmVyIGZ1bmN0aW9uJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3R5cGUxIHR5cGUyJywgYSksXG4gICAgbm9ybWFsaXplTGlzdGVuZXJzKFsndHlwZTEnLCAndHlwZTInXSwgYSksXG4gICAgJ2FycmF5IG9mIHR5cGVzIGVxdWl2YWxlbnQgdG8gc3BhY2Ugc2VwYXJhdGVkIHN0cmluZycpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgbm9ybWFsaXplTGlzdGVuZXJzKCd0eXBlMScsIFthLCBiXSksXG4gICAge1xuICAgICAgdHlwZTE6IFthLCBiXSxcbiAgICB9LFxuICAgICdzaW5nbGUgdHlwZSwgbXVsdGlwbGUgbGlzdGVuZXIgZnVuY3Rpb25zJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3ByZWZpeCcsIHsgXzE6IFthLCBiXSwgXzI6IFtiLCBjXSB9KSxcbiAgICB7XG4gICAgICBwcmVmaXhfMTogW2EsIGJdLFxuICAgICAgcHJlZml4XzI6IFtiLCBjXSxcbiAgICB9LFxuICAgICdzaW5nbGUgdHlwZSBwcmVmaXgsIG9iamVjdCBvZiB7IHN1ZmZpeDogW2ZuLCAuLi5dIH0nKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycygncHJlZml4MSBwcmVmaXgyJywgW3sgXzE6IFthLCBiXSwgXzI6IFtiLCBjXSB9XSksXG4gICAge1xuICAgICAgcHJlZml4MV8xOiBbYSwgYl0sXG4gICAgICBwcmVmaXgxXzI6IFtiLCBjXSxcbiAgICAgIHByZWZpeDJfMTogW2EsIGJdLFxuICAgICAgcHJlZml4Ml8yOiBbYiwgY10sXG4gICAgfSxcbiAgICAnbXVsdGlwbGUgdHlwZSBwcmVmaXhlcywgc2luZ2xlIGxlbmd0aCBhcnJheSBvZiB7IHN1ZmZpeDogW2ZuLCAuLi5dIH0nKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG5vcm1hbGl6ZUxpc3RlbmVycyh7IF8xOiBbYSwgYl0sIF8yOiBbYiwgY10gfSksXG4gICAge1xuICAgICAgXzE6IFthLCBiXSxcbiAgICAgIF8yOiBbYiwgY10sXG4gICAgfSxcbiAgICAnb2JqZWN0IG9mIHsgc3VmZml4OiBbZm4sIC4uLl0gfSBhcyB0eXBlIGFyZycpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgbm9ybWFsaXplTGlzdGVuZXJzKHsgJ18xIF8yJzogW2EsIGJdLCBfMzogW2IsIGNdIH0pLFxuICAgIHtcbiAgICAgIF8xOiBbYSwgYl0sXG4gICAgICBfMjogW2EsIGJdLFxuICAgICAgXzM6IFtiLCBjXSxcbiAgICB9LFxuICAgICdvYmplY3Qgb2YgeyBcInN1ZmZpeDEgc3VmZml4MlwiOiBbZm4sIC4uLl0sIC4uLiB9IGFzIHR5cGUgYXJnJylcblxuICB0LmRlZXBFcXVhbChcbiAgICBub3JtYWxpemVMaXN0ZW5lcnMoJ3ByZWZpeCcsIHsgJ18xIF8yJzogW2EsIGJdLCBfMzogW2IsIGNdIH0pLFxuICAgIHtcbiAgICAgIHByZWZpeF8xOiBbYSwgYl0sXG4gICAgICBwcmVmaXhfMjogW2EsIGJdLFxuICAgICAgcHJlZml4XzM6IFtiLCBjXSxcbiAgICB9LFxuICAgICdzaW5nbGUgdHlwZSBwcmVmaXgsIG9iamVjdCBvZiB7IFwic3VmZml4MSBzdWZmaXgyXCI6IFtmbiwgLi4uXSwgLi4uIH0nKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=