import { JSDOM } from '@interactjs/_dev/test/domator';
import test from '@interactjs/_dev/test/test';
import domObjects from './domObjects';
import { indexOfDeepestElement } from './domUtils';
test('utils/domUtils/indexOfDeepestElement', t => {
    const doc1 = new JSDOM(`<div id="topDiv">
    <div id="sib0"></div>
    <div id="sib1"></div>
    <div id="sib2"></div>
  </div>`).window.document;
    domObjects.init(doc1.defaultView);
    const ownerDocument = {
        name: 'Owner Document',
        lastChild: null,
    };
    const html = {
        name: 'html',
        lastChild: null,
        ownerDocument,
        parentNode: ownerDocument,
    };
    const body = {
        name: 'body',
        lastChild: null,
        ownerDocument,
        parentNode: html,
    };
    const wrapper = {
        name: 'wrapper',
        ownerDocument,
        parentNode: body,
        lastChild: null,
    };
    const a = {
        name: 'a',
        ownerDocument,
        parentNode: wrapper,
        lastChild: null,
    };
    const b1 = {
        name: 'b1',
        ownerDocument,
        parentNode: a,
        lastChild: null,
    };
    const b2 = {
        name: 'b2',
        ownerDocument,
        parentNode: a,
        lastChild: null,
    };
    const c1 = {
        name: 'c1',
        ownerDocument,
        parentNode: b1,
        lastChild: null,
    };
    const c2 = {
        name: 'c2',
        ownerDocument,
        parentNode: b1,
        lastChild: null,
    };
    const d1 = {
        name: 'd1',
        ownerDocument,
        parentNode: c1,
        lastChild: null,
    };
    const d1Comp = {
        name: 'd1_comp',
        ownerDocument,
        parentNode: d1,
        lastChild: null,
    };
    const d2Shadow = {
        name: 'd2_shadow',
        ownerDocument,
        parentNode: null,
        lastChild: null,
        host: d1Comp,
    };
    ownerDocument.lastChild = html;
    html.lastChild = body;
    body.lastChild = wrapper;
    a.lastChild = b2;
    b1.lastChild = c2;
    b2.lastChild = null;
    c1.lastChild = d1;
    c2.lastChild = null;
    d1.lastChild = d1;
    wrapper.lastChild = a;
    const deepestShadow = [null, d2Shadow, c1, b1, a];
    t.equal(indexOfDeepestElement(deepestShadow), deepestShadow.indexOf(d2Shadow), 'works with shadow root');
    const noShadow = [null, d1, c1, b1];
    t.equal(indexOfDeepestElement(noShadow), noShadow.indexOf(d1), 'only chooses elements that are passed in');
    const siblings = doc1.querySelectorAll('#topDiv > *');
    t.equal(indexOfDeepestElement(siblings), 2, 'last sibling is deepest with equal zIndex');
    siblings[0].style.zIndex = '2';
    siblings[1].style.zIndex = '2';
    siblings[2].style.zIndex = '1';
    t.equal(indexOfDeepestElement(siblings), 1, 'sibling with higher z-index is selected');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tVXRpbHMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRvbVV0aWxzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQ3JELE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sVUFBVSxNQUFNLGNBQWMsQ0FBQTtBQUNyQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFbEQsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQy9DLE1BQU0sSUFBSSxHQUFhLElBQUksS0FBSyxDQUFDOzs7O1NBSTFCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFBO0lBRXhCLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBRWpDLE1BQU0sYUFBYSxHQUFHO1FBQ3BCLElBQUksRUFBRSxnQkFBZ0I7UUFDdEIsU0FBUyxFQUFFLElBQUk7S0FDaEIsQ0FBQTtJQUNELE1BQU0sSUFBSSxHQUFHO1FBQ1gsSUFBSSxFQUFFLE1BQU07UUFDWixTQUFTLEVBQUUsSUFBSTtRQUNmLGFBQWE7UUFDYixVQUFVLEVBQUUsYUFBYTtLQUMxQixDQUFBO0lBRUQsTUFBTSxJQUFJLEdBQUc7UUFDWCxJQUFJLEVBQUUsTUFBTTtRQUNaLFNBQVMsRUFBRSxJQUFJO1FBQ2YsYUFBYTtRQUNiLFVBQVUsRUFBRSxJQUFJO0tBRWpCLENBQUE7SUFFRCxNQUFNLE9BQU8sR0FBRztRQUNkLElBQUksRUFBRSxTQUFTO1FBQ2YsYUFBYTtRQUNiLFVBQVUsRUFBRSxJQUFJO1FBQ2hCLFNBQVMsRUFBRSxJQUFJO0tBQ2hCLENBQUE7SUFFRCxNQUFNLENBQUMsR0FBRztRQUNSLElBQUksRUFBRSxHQUFHO1FBQ1QsYUFBYTtRQUNiLFVBQVUsRUFBRSxPQUFPO1FBQ25CLFNBQVMsRUFBRSxJQUFJO0tB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LEtBQUssQ0FDTCxxQkFBcUIsQ0FBQyxRQUFRLENBQUMsRUFDL0IsQ0FBQyxFQUNELHlDQUF5QyxDQUMxQyxDQUFBO0lBRUQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBKU0RPTSB9IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC9kb21hdG9yJ1xuaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgZG9tT2JqZWN0cyBmcm9tICcuL2RvbU9iamVjdHMnXG5pbXBvcnQgeyBpbmRleE9mRGVlcGVzdEVsZW1lbnQgfSBmcm9tICcuL2RvbVV0aWxzJ1xuXG50ZXN0KCd1dGlscy9kb21VdGlscy9pbmRleE9mRGVlcGVzdEVsZW1lbnQnLCB0ID0+IHtcbiAgY29uc3QgZG9jMTogRG9jdW1lbnQgPSBuZXcgSlNET00oYDxkaXYgaWQ9XCJ0b3BEaXZcIj5cbiAgICA8ZGl2IGlkPVwic2liMFwiPjwvZGl2PlxuICAgIDxkaXYgaWQ9XCJzaWIxXCI+PC9kaXY+XG4gICAgPGRpdiBpZD1cInNpYjJcIj48L2Rpdj5cbiAgPC9kaXY+YCkud2luZG93LmRvY3VtZW50XG5cbiAgZG9tT2JqZWN0cy5pbml0KGRvYzEuZGVmYXVsdFZpZXcpXG5cbiAgY29uc3Qgb3duZXJEb2N1bWVudCA9IHtcbiAgICBuYW1lOiAnT3duZXIgRG9jdW1lbnQnLFxuICAgIGxhc3RDaGlsZDogbnVsbCxcbiAgfVxuICBjb25zdCBodG1sID0ge1xuICAgIG5hbWU6ICdodG1sJyxcbiAgICBsYXN0Q2hpbGQ6IG51bGwsXG4gICAgb3duZXJEb2N1bWVudCxcbiAgICBwYXJlbnROb2RlOiBvd25lckRvY3VtZW50LFxuICB9XG5cbiAgY29uc3QgYm9keSA9IHtcbiAgICBuYW1lOiAnYm9keScsXG4gICAgbGFzdENoaWxkOiBudWxsLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgcGFyZW50Tm9kZTogaHRtbCxcblxuICB9XG5cbiAgY29uc3Qgd3JhcHBlciA9IHtcbiAgICBuYW1lOiAnd3JhcHBlcicsXG4gICAgb3duZXJEb2N1bWVudCxcbiAgICBwYXJlbnROb2RlOiBib2R5LFxuICAgIGxhc3RDaGlsZDogbnVsbCxcbiAgfVxuXG4gIGNvbnN0IGEgPSB7XG4gICAgbmFtZTogJ2EnLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgcGFyZW50Tm9kZTogd3JhcHBlcixcbiAgICBsYXN0Q2hpbGQ6IG51bGwsXG4gIH1cblxuICBjb25zdCBiMSA9IHtcbiAgICBuYW1lOiAnYjEnLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgcGFyZW50Tm9kZTogYSxcbiAgICBsYXN0Q2hpbGQ6IG51bGwsXG4gIH1cblxuICBjb25zdCBiMiA9IHtcbiAgICBuYW1lOiAnYjInLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgcGFyZW50Tm9kZTogYSxcbiAgICBsYXN0Q2hpbGQ6IG51bGwsXG4gIH1cblxuICBjb25zdCBjMSA9IHtcbiAgICBuYW1lOiAnYzEnLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgcGFyZW50Tm9kZTogYjEsXG4gICAgbGFzdENoaWxkOiBudWxsLFxuICB9XG5cbiAgY29uc3QgYzIgPSB7XG4gICAgbmFtZTogJ2MyJyxcbiAgICBvd25lckRvY3VtZW50LFxuICAgIHBhcmVudE5vZGU6IGIxLFxuICAgIGxhc3RDaGlsZDogbnVsbCxcbiAgfVxuXG4gIGNvbnN0IGQxID0ge1xuICAgIG5hbWU6ICdkMScsXG4gICAgb3duZXJEb2N1bWVudCxcbiAgICBwYXJlbnROb2RlOiBjMSxcbiAgICBsYXN0Q2hpbGQ6IG51bGwsXG4gIH1cblxuICBjb25zdCBkMUNvbXAgPSB7XG4gICAgbmFtZTogJ2QxX2NvbXAnLFxuICAgIG93bmVyRG9jdW1lbnQsXG4gICAgcGFyZW50Tm9kZTogZDEsXG4gICAgbGFzdENoaWxkOiBudWxsLFxuICB9XG5cbiAgY29uc3QgZDJTaGFkb3cgPSB7XG4gICAgbmFtZTogJ2QyX3NoYWRvdycsXG4gICAgb3duZXJEb2N1bWVudCxcbiAgICBwYXJlbnROb2RlOiBudWxsLFxuICAgIGxhc3RDaGlsZDogbnVsbCxcbiAgICBob3N0OiBkMUNvbXAsXG4gIH1cblxuICBvd25lckRvY3VtZW50Lmxhc3RDaGlsZCA9IGh0bWxcbiAgaHRtbC5sYXN0Q2hpbGQgPSBib2R5XG4gIGJvZHkubGFzdENoaWxkID0gd3JhcHBlclxuICBhLmxhc3RDaGlsZCA9IGIyXG4gIGIxLmxhc3RDaGlsZCA9IGMyXG4gIGIyLmxhc3RDaGlsZCA9IG51bGxcbiAgYzEubGFzdENoaWxkID0gZDFcbiAgYzIubGFzdENoaWxkID0gbnVsbFxuICBkMS5sYXN0Q2hpbGQgPSBkMVxuICB3cmFwcGVyLmxhc3RDaGlsZCA9IGFcblxuICBjb25zdCBkZWVwZXN0U2hhZG93ID0gW251bGwsIGQyU2hhZG93LCBjMSwgYjEsIGFdIGFzIHVua25vd24gYXMgSFRNTEVsZW1lbnRbXVxuICB0LmVxdWFsKGluZGV4T2ZEZWVwZXN0RWxlbWVudChkZWVwZXN0U2hhZG93KSwgZGVlcGVzdFNoYWRvdy5pbmRleE9mKGQyU2hhZG93IGFzIGFueSksICd3b3JrcyB3aXRoIHNoYWRvdyByb290JylcblxuICBjb25zdCBub1NoYWRvdyA9IFtudWxsLCBkMSwgYzEsIGIxXSBhcyB1bmtub3duIGFzIEhUTUxFbGVtZW50W11cblxuICB0LmVxdWFsKFxuICAgIGluZGV4T2ZEZWVwZXN0RWxlbWVudChub1NoYWRvdyksXG4gICAgbm9TaGFkb3cuaW5kZXhPZihkMSBhcyBhbnkpLFxuICAgICdvbmx5IGNob29zZXMgZWxlbWVudHMgdGhhdCBhcmUgcGFzc2VkIGluJyxcbiAgKVxuXG4gIGNvbnN0IHNpYmxpbmdzOiBOb2RlTGlzdE9mPEhUTUxFbGVtZW50PiA9IGRvYzEucXVlcnlTZWxlY3RvckFsbCgnI3RvcERpdiA+IConKVxuXG4gIHQuZXF1YWwoXG4gICAgaW5kZXhPZkRlZXBlc3RFbGVtZW50KHNpYmxpbmdzKSxcbiAgICAyLFxuICAgICdsYXN0IHNpYmxpbmcgaXMgZGVlcGVzdCB3aXRoIGVxdWFsIHpJbmRleCcsXG4gIClcblxuICBzaWJsaW5nc1swXS5zdHlsZS56SW5kZXggPSAnMidcbiAgc2libGluZ3NbMV0uc3R5bGUuekluZGV4ID0gJzInXG4gIHNpYmxpbmdzWzJdLnN0eWxlLnpJbmRleCA9ICcxJ1xuXG4gIHQuZXF1YWwoXG4gICAgaW5kZXhPZkRlZXBlc3RFbGVtZW50KHNpYmxpbmdzKSxcbiAgICAxLFxuICAgICdzaWJsaW5nIHdpdGggaGlnaGVyIHotaW5kZXggaXMgc2VsZWN0ZWQnLFxuICApXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==