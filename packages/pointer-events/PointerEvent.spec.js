import test from '@interactjs/_dev/test/test';
import Interaction from '@interactjs/core/Interaction';
import * as helpers from '@interactjs/core/tests/_helpers';
import pointerUtils from '@interactjs/utils/pointerUtils';
import Signals from '@interactjs/utils/Signals';
import PointerEvent from './PointerEvent';
test('PointerEvent constructor', t => {
    const type = 'TEST_EVENT';
    const pointerId = -100;
    const testPointerProp = ['TEST_POINTER_PROP'];
    const pointer = {
        pointerId,
        testPointerProp,
        pointerType: 'TEST_POINTER_TYPE',
    };
    const testEventProp = ['TEST_EVENT_PROP'];
    const event = {
        testEventProp,
    };
    const interaction = new Interaction({ signals: new Signals() });
    const eventTarget = {};
    const pointerEvent = new PointerEvent(type, pointer, event, eventTarget, interaction, 0);
    t.equal(pointerEvent.testPointerProp, testPointerProp, 'pointerEvent is extended form pointer');
    t.equal(pointerEvent.testEventProp, testEventProp, 'pointerEvent is extended form Event');
    t.equal(pointerEvent.type, type, 'type is set correctly');
    t.equal(pointerEvent.pointerType, pointerUtils.getPointerType(pointer), 'pointerType is set correctly');
    t.equal(pointerEvent.pointerId, pointerId, 'pointerId is set correctly');
    t.equal(pointerEvent.originalEvent, event, 'originalEvent is set correctly');
    t.equal(pointerEvent.interaction, interaction._proxy, 'interaction is set correctly');
    t.equal(pointerEvent.target, eventTarget, 'target is set correctly');
    t.equal(pointerEvent.currentTarget, null, 'currentTarget is null');
    t.end();
});
test('PointerEvent methods', t => {
    const methodContexts = {};
    const event = ['preventDefault', 'stopPropagation', 'stopImmediatePropagation']
        .reduce((acc, methodName) => {
        acc[methodName] = function () { methodContexts[methodName] = this; };
        return acc;
    }, helpers.newPointer());
    const pointerEvent = new PointerEvent('TEST', {}, event, null, {}, 0);
    pointerEvent.preventDefault();
    t.equal(methodContexts.preventDefault, event, 'PointerEvent.preventDefault() calls preventDefault of originalEvent');
    t.notOk(pointerEvent.propagationStopped, 'propagationStopped is false before call to stopPropagation');
    pointerEvent.stopPropagation();
    t.ok(pointerEvent.propagationStopped, 'stopPropagation sets propagationStopped to true');
    t.equal(methodContexts.stopPropagation, undefined, 'PointerEvent.stopPropagation() does not call stopPropagation of originalEvent');
    t.notOk(pointerEvent.immediatePropagationStopped, 'immediatePropagationStopped is false before call to stopImmediatePropagation');
    pointerEvent.stopImmediatePropagation();
    t.equal(methodContexts.stopImmediatePropagation, undefined, 'PointerEvent.stopImmediatePropagation() does not call stopImmediatePropagation of originalEvent');
    t.ok(pointerEvent.immediatePropagationStopped, 'stopImmediatePropagation sets immediatePropagationStopped to true');
    const origin = { x: 20, y: 30 };
    pointerEvent._subtractOrigin(origin);
    t.equal(pointerEvent.pageX, event.pageX - origin.x, 'subtractOrigin updates pageX correctly');
    t.equal(pointerEvent.pageY, event.pageY - origin.y, 'subtractOrigin updates pageY correctly');
    t.equal(pointerEvent.clientX, event.clientX - origin.x, 'subtractOrigin updates clientX correctly');
    t.equal(pointerEvent.clientY, event.clientY - origin.y, 'subtractOrigin updates clientY correctly');
    pointerEvent._addOrigin(origin);
    t.ok(['pageX', 'pageY', 'clientX', 'clientY'].reduce((allEqual, prop) => allEqual && pointerEvent[prop] === event[prop], true), 'addOrigin with the subtracted origin reverts to original coordinates');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9pbnRlckV2ZW50LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJQb2ludGVyRXZlbnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLFdBQVcsTUFBTSw4QkFBOEIsQ0FBQTtBQUN0RCxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sWUFBWSxNQUFNLGdDQUFnQyxDQUFBO0FBQ3pELE9BQU8sT0FBTyxNQUFNLDJCQUEyQixDQUFBO0FBQy9DLE9BQU8sWUFBWSxNQUFNLGdCQUFnQixDQUFBO0FBRXpDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUNuQyxNQUFNLElBQUksR0FBRyxZQUFZLENBQUE7SUFDekIsTUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLENBQUE7SUFDdEIsTUFBTSxlQUFlLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0lBQzdDLE1BQU0sT0FBTyxHQUFHO1FBQ2QsU0FBUztRQUNULGVBQWU7UUFDZixXQUFXLEVBQUUsbUJBQW1CO0tBQzFCLENBQUE7SUFDUixNQUFNLGFBQWEsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUE7SUFDekMsTUFBTSxLQUFLLEdBQUc7UUFDWixhQUFhO0tBQ1AsQ0FBQTtJQUNSLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsT0FBTyxFQUFFLElBQUksT0FBTyxFQUFFLEVBQVMsQ0FBQyxDQUFBO0lBQ3RFLE1BQU0sV0FBVyxHQUFHLEVBQWEsQ0FBQTtJQUNqQyxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBUSxDQUFBO0lBRS9GLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLGVBQWUsRUFBRSxlQUFlLEVBQ25ELHVD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ZSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXBDLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBSSxLQUFLLENBQUMsS0FBSyxHQUFLLE1BQU0sQ0FBQyxDQUFDLEVBQUUsd0NBQXdDLENBQUMsQ0FBQTtJQUNqRyxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUksS0FBSyxDQUFDLEtBQUssR0FBSyxNQUFNLENBQUMsQ0FBQyxFQUFFLHdDQUF3QyxDQUFDLENBQUE7SUFDakcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSwwQ0FBMEMsQ0FBQyxDQUFBO0lBQ25HLENBQUMsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDLEVBQUUsMENBQTBDLENBQUMsQ0FBQTtJQUVuRyxZQUFZLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQy9CLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxRQUFRLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLENBQUMsRUFDNUgsc0VBQXNFLENBQUMsQ0FBQTtJQUV6RSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IEludGVyYWN0aW9uIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvSW50ZXJhY3Rpb24nXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgcG9pbnRlclV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL3BvaW50ZXJVdGlscydcbmltcG9ydCBTaWduYWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL1NpZ25hbHMnXG5pbXBvcnQgUG9pbnRlckV2ZW50IGZyb20gJy4vUG9pbnRlckV2ZW50J1xuXG50ZXN0KCdQb2ludGVyRXZlbnQgY29uc3RydWN0b3InLCB0ID0+IHtcbiAgY29uc3QgdHlwZSA9ICdURVNUX0VWRU5UJ1xuICBjb25zdCBwb2ludGVySWQgPSAtMTAwXG4gIGNvbnN0IHRlc3RQb2ludGVyUHJvcCA9IFsnVEVTVF9QT0lOVEVSX1BST1AnXVxuICBjb25zdCBwb2ludGVyID0ge1xuICAgIHBvaW50ZXJJZCxcbiAgICB0ZXN0UG9pbnRlclByb3AsXG4gICAgcG9pbnRlclR5cGU6ICdURVNUX1BPSU5URVJfVFlQRScsXG4gIH0gYXMgYW55XG4gIGNvbnN0IHRlc3RFdmVudFByb3AgPSBbJ1RFU1RfRVZFTlRfUFJPUCddXG4gIGNvbnN0IGV2ZW50ID0ge1xuICAgIHRlc3RFdmVudFByb3AsXG4gIH0gYXMgYW55XG4gIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEludGVyYWN0aW9uKHsgc2lnbmFsczogbmV3IFNpZ25hbHMoKSB9IGFzIGFueSlcbiAgY29uc3QgZXZlbnRUYXJnZXQgPSB7fSBhcyBFbGVtZW50XG4gIGNvbnN0IHBvaW50ZXJFdmVudCA9IG5ldyBQb2ludGVyRXZlbnQodHlwZSwgcG9pbnRlciwgZXZlbnQsIGV2ZW50VGFyZ2V0LCBpbnRlcmFjdGlvbiwgMCkgYXMgYW55XG5cbiAgdC5lcXVhbChwb2ludGVyRXZlbnQudGVzdFBvaW50ZXJQcm9wLCB0ZXN0UG9pbnRlclByb3AsXG4gICAgJ3BvaW50ZXJFdmVudCBpcyBleHRlbmRlZCBmb3JtIHBvaW50ZXInKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC50ZXN0RXZlbnRQcm9wLCB0ZXN0RXZlbnRQcm9wLFxuICAgICdwb2ludGVyRXZlbnQgaXMgZXh0ZW5kZWQgZm9ybSBFdmVudCcpXG5cbiAgdC5lcXVhbChwb2ludGVyRXZlbnQudHlwZSwgdHlwZSxcbiAgICAndHlwZSBpcyBzZXQgY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQucG9pbnRlclR5cGUsIHBvaW50ZXJVdGlscy5nZXRQb2ludGVyVHlwZShwb2ludGVyKSxcbiAgICAncG9pbnRlclR5cGUgaXMgc2V0IGNvcnJlY3RseScpXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LnBvaW50ZXJJZCwgcG9pbnRlcklkLFxuICAgICdwb2ludGVySWQgaXMgc2V0IGNvcnJlY3RseScpXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50Lm9yaWdpbmFsRXZlbnQsIGV2ZW50LFxuICAgICdvcmlnaW5hbEV2ZW50IGlzIHNldCBjb3JyZWN0bHknKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5pbnRlcmFjdGlvbiwgaW50ZXJhY3Rpb24uX3Byb3h5LFxuICAgICdpbnRlcmFjdGlvbiBpcyBzZXQgY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQudGFyZ2V0LCBldmVudFRhcmdldCxcbiAgICAndGFyZ2V0IGlzIHNldCBjb3JyZWN0bHknKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5jdXJyZW50VGFyZ2V0LCBudWxsLFxuICAgICdjdXJyZW50VGFyZ2V0IGlzIG51bGwnKVxuXG4gIHQuZW5kKClcbn0pXG5cbnRlc3QoJ1BvaW50ZXJFdmVudCBtZXRob2RzJywgdCA9PiB7XG4gIGNvbnN0IG1ldGhvZENvbnRleHRzID0ge30gYXMgYW55XG4gIGNvbnN0IGV2ZW50OiBhbnkgPSBbJ3ByZXZlbnREZWZhdWx0JywgJ3N0b3BQcm9wYWdhdGlvbicsICdzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24nXVxuICAgIC5yZWR1Y2UoKGFjYywgbWV0aG9kTmFtZSkgPT4ge1xuICAgICAgYWNjW21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkgeyBtZXRob2RDb250ZXh0c1ttZXRob2ROYW1lXSA9IHRoaXMgfVxuICAgICAgcmV0dXJuIGFjY1xuICAgIH0sIGhlbHBlcnMubmV3UG9pbnRlcigpKVxuICBjb25zdCBwb2ludGVyRXZlbnQgPSBuZXcgUG9pbnRlckV2ZW50KCdURVNUJywge30gYXMgYW55LCBldmVudCwgbnVsbCwge30gYXMgYW55LCAwKVxuXG4gIHBvaW50ZXJFdmVudC5wcmV2ZW50RGVmYXVsdCgpXG4gIHQuZXF1YWwobWV0aG9kQ29udGV4dHMucHJldmVudERlZmF1bHQsIGV2ZW50LFxuICAgICdQb2ludGVyRXZlbnQucHJldmVudERlZmF1bHQoKSBjYWxscyBwcmV2ZW50RGVmYXVsdCBvZiBvcmlnaW5hbEV2ZW50JylcblxuICB0Lm5vdE9rKHBvaW50ZXJFdmVudC5wcm9wYWdhdGlvblN0b3BwZWQsXG4gICAgJ3Byb3BhZ2F0aW9uU3RvcHBlZCBpcyBmYWxzZSBiZWZvcmUgY2FsbCB0byBzdG9wUHJvcGFnYXRpb24nKVxuICBwb2ludGVyRXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgdC5vayhwb2ludGVyRXZlbnQucHJvcGFnYXRpb25TdG9wcGVkLFxuICAgICdzdG9wUHJvcGFnYXRpb24gc2V0cyBwcm9wYWdhdGlvblN0b3BwZWQgdG8gdHJ1ZScpXG4gIHQuZXF1YWwobWV0aG9kQ29udGV4dHMuc3RvcFByb3BhZ2F0aW9uLCB1bmRlZmluZWQsXG4gICAgJ1BvaW50ZXJFdmVudC5zdG9wUHJvcGFnYXRpb24oKSBkb2VzIG5vdCBjYWxsIHN0b3BQcm9wYWdhdGlvbiBvZiBvcmlnaW5hbEV2ZW50JylcblxuICB0Lm5vdE9rKHBvaW50ZXJFdmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQsXG4gICAgJ2ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCBpcyBmYWxzZSBiZWZvcmUgY2FsbCB0byBzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24nKVxuICBwb2ludGVyRXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcbiAgdC5lcXVhbChtZXRob2RDb250ZXh0cy5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24sIHVuZGVmaW5lZCxcbiAgICAnUG9pbnRlckV2ZW50LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpIGRvZXMgbm90IGNhbGwgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIG9mIG9yaWdpbmFsRXZlbnQnKVxuICB0Lm9rKHBvaW50ZXJFdmVudC5pbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQsXG4gICAgJ3N0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiBzZXRzIGltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCB0byB0cnVlJylcblxuICBjb25zdCBvcmlnaW4gPSB7IHg6IDIwLCB5OiAzMCB9XG4gIHBvaW50ZXJFdmVudC5fc3VidHJhY3RPcmlnaW4ob3JpZ2luKVxuXG4gIHQuZXF1YWwocG9pbnRlckV2ZW50LnBhZ2VYLCAgIGV2ZW50LnBhZ2VYICAgLSBvcmlnaW4ueCwgJ3N1YnRyYWN0T3JpZ2luIHVwZGF0ZXMgcGFnZVggY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQucGFnZVksICAgZXZlbnQucGFnZVkgICAtIG9yaWdpbi55LCAnc3VidHJhY3RPcmlnaW4gdXBkYXRlcyBwYWdlWSBjb3JyZWN0bHknKVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5jbGllbnRYLCBldmVudC5jbGllbnRYIC0gb3JpZ2luLngsICdzdWJ0cmFjdE9yaWdpbiB1cGRhdGVzIGNsaWVudFggY29ycmVjdGx5JylcbiAgdC5lcXVhbChwb2ludGVyRXZlbnQuY2xpZW50WSwgZXZlbnQuY2xpZW50WSAtIG9yaWdpbi55LCAnc3VidHJhY3RPcmlnaW4gdXBkYXRlcyBjbGllbnRZIGNvcnJlY3RseScpXG5cbiAgcG9pbnRlckV2ZW50Ll9hZGRPcmlnaW4ob3JpZ2luKVxuICB0Lm9rKFsncGFnZVgnLCAncGFnZVknLCAnY2xpZW50WCcsICdjbGllbnRZJ10ucmVkdWNlKChhbGxFcXVhbCwgcHJvcCkgPT4gYWxsRXF1YWwgJiYgcG9pbnRlckV2ZW50W3Byb3BdID09PSBldmVudFtwcm9wXSwgdHJ1ZSksXG4gICAgJ2FkZE9yaWdpbiB3aXRoIHRoZSBzdWJ0cmFjdGVkIG9yaWdpbiByZXZlcnRzIHRvIG9yaWdpbmFsIGNvb3JkaW5hdGVzJylcblxuICB0LmVuZCgpXG59KVxuIl19