import test from '@interactjs/_dev/test/test';
import Eventable from '@interactjs/core/Eventable';
import * as helpers from '@interactjs/core/tests/_helpers';
import Signals from '@interactjs/utils/Signals';
import pointerEvents from './base';
import holdRepeat from './holdRepeat';
function mockScope() {
    return helpers.mockScope({
        pointerEvents: {
            defaults: {},
            signals: new Signals(),
            types: [],
            fire: () => { },
        },
    });
}
test('holdRepeat count', t => {
    const pointerEvent = {
        type: 'hold',
        count: 0,
    };
    const { scope } = helpers.testEnv({ plugins: [pointerEvents, holdRepeat] });
    scope.pointerEvents.signals.fire('new', { pointerEvent });
    t.equal(pointerEvent.count, 1, 'first hold count is 1 with count previously undefined');
    const count = 20;
    pointerEvent.count = count;
    scope.pointerEvents.signals.fire('new', { pointerEvent });
    t.equal(pointerEvent.count, count + 1, 'existing hold count is incremented');
    t.end();
});
test('holdRepeat onFired', t => {
    const scope = mockScope();
    scope.usePlugin(pointerEvents);
    scope.usePlugin(holdRepeat);
    const interaction = scope.interactions.new({});
    const pointerEvent = {
        type: 'hold',
    };
    const eventTarget = {};
    const eventable = new Eventable(Object.assign({}, scope.pointerEvents.defaults, {
        holdRepeatInterval: 0,
    }));
    const signalArg = {
        interaction,
        pointerEvent,
        eventTarget,
        targets: [{
                eventable,
            }],
    };
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.notOk('holdIntervalHandle' in interaction, 'interaction interval handle was not saved with 0 holdRepeatInterval');
    eventable.options.holdRepeatInterval = 10;
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.ok('holdIntervalHandle' in interaction, 'interaction interval handle was saved with interval > 0');
    clearInterval(interaction.holdIntervalHandle);
    pointerEvent.type = 'NOT_HOLD';
    delete interaction.holdIntervalHandle;
    scope.pointerEvents.signals.fire('fired', signalArg);
    t.notOk('holdIntervalHandle' in interaction, 'interaction interval handle is not saved if pointerEvent.type is not "hold"');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZFJlcGVhdC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9sZFJlcGVhdC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sU0FBUyxNQUFNLDRCQUE0QixDQUFBO0FBQ2xELE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxPQUFPLE1BQU0sMkJBQTJCLENBQUE7QUFDL0MsT0FBTyxhQUFhLE1BQU0sUUFBUSxDQUFBO0FBQ2xDLE9BQU8sVUFBVSxNQUFNLGNBQWMsQ0FBQTtBQUVyQyxTQUFTLFNBQVM7SUFDaEIsT0FBTyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBQ3ZCLGFBQWEsRUFBRTtZQUNiLFFBQVEsRUFBRSxFQUFFO1lBQ1osT0FBTyxFQUFFLElBQUksT0FBTyxFQUFFO1lBQ3RCLEtBQUssRUFBRSxFQUFFO1lBQ1QsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFFLENBQUM7U0FDZjtLQUNGLENBQUMsQ0FBQTtBQUNKLENBQUM7QUFFRCxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDM0IsTUFBTSxZQUFZLEdBQUc7UUFDbkIsSUFBSSxFQUFFLE1BQU07UUFDWixLQUFLLEVBQUUsQ0FBQztLQUNULENBQUE7SUFFRCxNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxVQUFVLENBQUMsRUFBRSxDQUFDLENBQUE7SUFFM0UsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUE7SUFDekQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSx1REFBdUQsQ0FBQyxDQUFBO0lBRXZGLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQTtJQUNoQixZQUFZLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtJQUMxQixLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEVBQUUsWUFBWSxFQUFFLENBQUMsQ0FBQTtJQUN6RCxDQUFDLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFBO0lBRTVFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBO0FBRUYsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQzdCLE1BQU0sS0FBSyxHQUFHLFNBQVMsRUFBRSxDQUFBO0lBQ3pCLEtBQUssQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDOUIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUUzQixNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQTtJQUM5QyxNQUFNLFlBQVksR0FBRztRQUNuQixJQUFJLEVBQUUsTUFBTTtLQUNiLENBQUE7SUFDRCxNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUE7SUFDdEIsTUFBTSxTQUFTLEdBQUcsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLGFBQWEsQ0FBQyxRQUFRLEVBQUU7UUFDOUUsa0JBQWtCLEVBQUUsQ0FBQztLQUN0QixDQUFDLENBQUMsQ0FBQTtJQUNILE1BQU0sU0FBUyxHQUFHO1FBQ2hCLFdBQVc7UUFDWCxZQUFZO1FBQ1osV0FBVztRQUNYLE9BQU8sRUFBRSxDQUFDO2dCQUNSLFNBQVM7YUFDVixDQUFDO0tBQ0gsQ0FBQTtJQUVELEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxXQUFXLEVBQ3pDLHFFQUFxRSxDQUFDLENBQUE7SUFFeEUsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUE7SUFDekMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsRUFBRSxDQUFDLG9CQUFvQixJQUFJLFdBQVcsRUFDdEMseURBQXlELENBQUMsQ0FBQTtJQUU1RCxhQUFhLENBQUMsV0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUE7SUFFN0MsWUFBWSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUE7SUFDOUIsT0FBTyxXQUFXLENBQUMsa0JBQWtCLENBQUE7SUFDckMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsS0FBSyxDQUFDLG9CQUFvQixJQUFJLFdBQVcsRUFDekMsNkVBQTZFLENBQUMsQ0FBQTtJQUVoRixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0IEV2ZW50YWJsZSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0V2ZW50YWJsZSdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCBTaWduYWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzL1NpZ25hbHMnXG5pbXBvcnQgcG9pbnRlckV2ZW50cyBmcm9tICcuL2Jhc2UnXG5pbXBvcnQgaG9sZFJlcGVhdCBmcm9tICcuL2hvbGRSZXBlYXQnXG5cbmZ1bmN0aW9uIG1vY2tTY29wZSAoKSB7XG4gIHJldHVybiBoZWxwZXJzLm1vY2tTY29wZSh7XG4gICAgcG9pbnRlckV2ZW50czoge1xuICAgICAgZGVmYXVsdHM6IHt9LFxuICAgICAgc2lnbmFsczogbmV3IFNpZ25hbHMoKSxcbiAgICAgIHR5cGVzOiBbXSxcbiAgICAgIGZpcmU6ICgpID0+IHt9LFxuICAgIH0sXG4gIH0pXG59XG5cbnRlc3QoJ2hvbGRSZXBlYXQgY291bnQnLCB0ID0+IHtcbiAgY29uc3QgcG9pbnRlckV2ZW50ID0ge1xuICAgIHR5cGU6ICdob2xkJyxcbiAgICBjb3VudDogMCxcbiAgfVxuXG4gIGNvbnN0IHsgc2NvcGUgfSA9IGhlbHBlcnMudGVzdEVudih7IHBsdWdpbnM6IFtwb2ludGVyRXZlbnRzLCBob2xkUmVwZWF0XSB9KVxuXG4gIHNjb3BlLnBvaW50ZXJFdmVudHMuc2lnbmFscy5maXJlKCduZXcnLCB7IHBvaW50ZXJFdmVudCB9KVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5jb3VudCwgMSwgJ2ZpcnN0IGhvbGQgY291bnQgaXMgMSB3aXRoIGNvdW50IHByZXZpb3VzbHkgdW5kZWZpbmVkJylcblxuICBjb25zdCBjb3VudCA9IDIwXG4gIHBvaW50ZXJFdmVudC5jb3VudCA9IGNvdW50XG4gIHNjb3BlLnBvaW50ZXJFdmVudHMuc2lnbmFscy5maXJlKCduZXcnLCB7IHBvaW50ZXJFdmVudCB9KVxuICB0LmVxdWFsKHBvaW50ZXJFdmVudC5jb3VudCwgY291bnQgKyAxLCAnZXhpc3RpbmcgaG9sZCBjb3VudCBpcyBpbmNyZW1lbnRlZCcpXG5cbiAgdC5lbmQoKVxufSlcblxudGVzdCgnaG9sZFJlcGVhdCBvbkZpcmVkJywgdCA9PiB7XG4gIGNvbnN0IHNjb3BlID0gbW9ja1Njb3BlKClcbiAgc2NvcGUudXNlUGx1Z2luKHBvaW50ZXJFdmVudHMpXG4gIHNjb3BlLnVzZVBsdWdpbihob2xkUmVwZWF0KVxuXG4gIGNvbnN0IGludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcbiAgY29uc3QgcG9pbnRlckV2ZW50ID0ge1xuICAgIHR5cGU6ICdob2xkJyxcbiAgfVxuICBjb25zdCBldmVudFRhcmdldCA9IHt9XG4gIGNvbnN0IGV2ZW50YWJsZSA9IG5ldyBFdmVudGFibGUoT2JqZWN0LmFzc2lnbih7fSwgc2NvcGUucG9pbnRlckV2ZW50cy5kZWZhdWx0cywge1xuICAgIGhvbGRSZXBlYXRJbnRlcnZhbDogMCxcbiAgfSkpXG4gIGNvbnN0IHNpZ25hbEFyZyA9IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBwb2ludGVyRXZlbnQsXG4gICAgZXZlbnRUYXJnZXQsXG4gICAgdGFyZ2V0czogW3tcbiAgICAgIGV2ZW50YWJsZSxcbiAgICB9XSxcbiAgfVxuXG4gIHNjb3BlLnBvaW50ZXJFdmVudHMuc2lnbmFscy5maXJlKCdmaXJlZCcsIHNpZ25hbEFyZylcbiAgdC5ub3RPaygnaG9sZEludGVydmFsSGFuZGxlJyBpbiBpbnRlcmFjdGlvbixcbiAgICAnaW50ZXJhY3Rpb24gaW50ZXJ2YWwgaGFuZGxlIHdhcyBub3Qgc2F2ZWQgd2l0aCAwIGhvbGRSZXBlYXRJbnRlcnZhbCcpXG5cbiAgZXZlbnRhYmxlLm9wdGlvbnMuaG9sZFJlcGVhdEludGVydmFsID0gMTBcbiAgc2NvcGUucG9pbnRlckV2ZW50cy5zaWduYWxzLmZpcmUoJ2ZpcmVkJywgc2lnbmFsQXJnKVxuICB0Lm9rKCdob2xkSW50ZXJ2YWxIYW5kbGUnIGluIGludGVyYWN0aW9uLFxuICAgICdpbnRlcmFjdGlvbiBpbnRlcnZhbCBoYW5kbGUgd2FzIHNhdmVkIHdpdGggaW50ZXJ2YWwgPiAwJylcblxuICBjbGVhckludGVydmFsKGludGVyYWN0aW9uLmhvbGRJbnRlcnZhbEhhbmRsZSlcblxuICBwb2ludGVyRXZlbnQudHlwZSA9ICdOT1RfSE9MRCdcbiAgZGVsZXRlIGludGVyYWN0aW9uLmhvbGRJbnRlcnZhbEhhbmRsZVxuICBzY29wZS5wb2ludGVyRXZlbnRzLnNpZ25hbHMuZmlyZSgnZmlyZWQnLCBzaWduYWxBcmcpXG4gIHQubm90T2soJ2hvbGRJbnRlcnZhbEhhbmRsZScgaW4gaW50ZXJhY3Rpb24sXG4gICAgJ2ludGVyYWN0aW9uIGludGVydmFsIGhhbmRsZSBpcyBub3Qgc2F2ZWQgaWYgcG9pbnRlckV2ZW50LnR5cGUgaXMgbm90IFwiaG9sZFwiJylcblxuICB0LmVuZCgpXG59KVxuIl19