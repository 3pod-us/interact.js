import * as actions from '@interactjs/actions';
import autoScroll from '@interactjs/auto-scroll';
import * as autoStart from '@interactjs/auto-start';
import interactablePreventDefault from '@interactjs/core/interactablePreventDefault';
import devTools from '@interactjs/dev-tools';
import inertia from '@interactjs/inertia';
import * as modifiers from '@interactjs/modifiers';
import modifiersBase from '@interactjs/modifiers/base';
import * as pointerEvents from '@interactjs/pointer-events';
import reflow from '@interactjs/reflow';
import interact, { scope } from './interact';
// exporting init here due to #726
function init(window) {
    scope.init(window);
    interact.use(interactablePreventDefault);
    // inertia
    interact.use(inertia);
    // pointerEvents
    interact.use(pointerEvents);
    // autoStart, hold
    interact.use(autoStart);
    // drag and drop, resize, gesture
    interact.use(actions);
    // snap, resize, etc.
    interact.use(modifiersBase);
    // for backwrads compatibility
    for (const type in modifiers) {
        const { _defaults, _methods } = modifiers[type];
        _defaults._methods = _methods;
        scope.defaults.perAction[type] = _defaults;
    }
    // autoScroll
    interact.use(autoScroll);
    // reflow
    interact.use(reflow);
    // eslint-disable-next-line no-undef
    if (process.env.NODE_ENV !== 'production') {
        interact.use(devTools);
    }
    return interact;
}
// eslint-disable-next-line no-undef
interact.version = init.version = process.env.npm_package_version;
export default interact;
export { init, interact, actions, autoScroll, interactablePreventDefault, inertia, modifiersBase as modifiers, pointerEvents, reflow, };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLHFCQUFxQixDQUFBO0FBQzlDLE9BQU8sVUFBVSxNQUFNLHlCQUF5QixDQUFBO0FBQ2hELE9BQU8sS0FBSyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDbkQsT0FBTywwQkFBMEIsTUFBTSw2Q0FBNkMsQ0FBQTtBQUNwRixPQUFPLFFBQVEsTUFBTSx1QkFBdUIsQ0FBQTtBQUM1QyxPQUFPLE9BQU8sTUFBTSxxQkFBcUIsQ0FBQTtBQUN6QyxPQUFPLEtBQUssU0FBUyxNQUFNLHVCQUF1QixDQUFBO0FBQ2xELE9BQU8sYUFBYSxNQUFNLDRCQUE0QixDQUFBO0FBQ3RELE9BQU8sS0FBSyxhQUFhLE1BQU0sNEJBQTRCLENBQUE7QUFDM0QsT0FBTyxNQUFNLE1BQU0sb0JBQW9CLENBQUE7QUFDdkMsT0FBTyxRQUFRLEVBQUUsRUFBRSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUE7QUFFNUMsa0NBQWtDO0FBQ2xDLFNBQVMsSUFBSSxDQUFFLE1BQWM7SUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUVsQixRQUFRLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUE7SUFFeEMsVUFBVTtJQUNWLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFckIsZ0JBQWdCO0lBQ2hCLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFM0Isa0JBQWtCO0lBQ2xCLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUE7SUFFdkIsaUNBQWlDO0lBQ2pDLFFBQVEsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFckIscUJBQXFCO0lBQ3JCLFFBQVEsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFM0IsOEJBQThCO0lBQzlCLEtBQUssTUFBTSxJQUFJLElBQUksU0FBUyxFQUFFO1FBQzVCLE1BQU0sRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO1FBRS9DLFNBQVMsQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQzdCLEtBQUssQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLFNBQVMsQ0FBQTtLQUMzQztJQUVELGFBQWE7SUFDYixRQUFRLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBRXhCLFNBQVM7SUFDVCxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBRXBCLG9DQUFvQztJQUNwQyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxLQUFLLFlBQVksRUFBRTtRQUN6QyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFBO0tBQ3ZCO0lBRUQsT0FBTyxRQUFRLENBQUE7QUFDakIsQ0FBQztBQUVELG9DQUFvQztBQUNwQyxRQUFRLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQTtBQUVqRSxlQUFlLFFBQVEsQ0FBQTtBQUN2QixPQUFPLEVBQ0wsSUFBSSxFQUNKLFFBQVEsRUFDUixPQUFPLEVBQ1AsVUFBVSxFQUNWLDBCQUEwQixFQUMxQixPQUFPLEVBQ1AsYUFBYSxJQUFJLFNBQVMsRUFDMUIsYUFBYSxFQUNiLE1BQU0sR0FDUCxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYWN0aW9ucyBmcm9tICdAaW50ZXJhY3Rqcy9hY3Rpb25zJ1xuaW1wb3J0IGF1dG9TY3JvbGwgZnJvbSAnQGludGVyYWN0anMvYXV0by1zY3JvbGwnXG5pbXBvcnQgKiBhcyBhdXRvU3RhcnQgZnJvbSAnQGludGVyYWN0anMvYXV0by1zdGFydCdcbmltcG9ydCBpbnRlcmFjdGFibGVQcmV2ZW50RGVmYXVsdCBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL2ludGVyYWN0YWJsZVByZXZlbnREZWZhdWx0J1xuaW1wb3J0IGRldlRvb2xzIGZyb20gJ0BpbnRlcmFjdGpzL2Rldi10b29scydcbmltcG9ydCBpbmVydGlhIGZyb20gJ0BpbnRlcmFjdGpzL2luZXJ0aWEnXG5pbXBvcnQgKiBhcyBtb2RpZmllcnMgZnJvbSAnQGludGVyYWN0anMvbW9kaWZpZXJzJ1xuaW1wb3J0IG1vZGlmaWVyc0Jhc2UgZnJvbSAnQGludGVyYWN0anMvbW9kaWZpZXJzL2Jhc2UnXG5pbXBvcnQgKiBhcyBwb2ludGVyRXZlbnRzIGZyb20gJ0BpbnRlcmFjdGpzL3BvaW50ZXItZXZlbnRzJ1xuaW1wb3J0IHJlZmxvdyBmcm9tICdAaW50ZXJhY3Rqcy9yZWZsb3cnXG5pbXBvcnQgaW50ZXJhY3QsIHsgc2NvcGUgfSBmcm9tICcuL2ludGVyYWN0J1xuXG4vLyBleHBvcnRpbmcgaW5pdCBoZXJlIGR1ZSB0byAjNzI2XG5mdW5jdGlvbiBpbml0ICh3aW5kb3c6IFdpbmRvdyk6IHR5cGVvZiBpbnRlcmFjdCB7XG4gIHNjb3BlLmluaXQod2luZG93KVxuXG4gIGludGVyYWN0LnVzZShpbnRlcmFjdGFibGVQcmV2ZW50RGVmYXVsdClcblxuICAvLyBpbmVydGlhXG4gIGludGVyYWN0LnVzZShpbmVydGlhKVxuXG4gIC8vIHBvaW50ZXJFdmVudHNcbiAgaW50ZXJhY3QudXNlKHBvaW50ZXJFdmVudHMpXG5cbiAgLy8gYXV0b1N0YXJ0LCBob2xkXG4gIGludGVyYWN0LnVzZShhdXRvU3RhcnQpXG5cbiAgLy8gZHJhZyBhbmQgZHJvcCwgcmVzaXplLCBnZXN0dXJlXG4gIGludGVyYWN0LnVzZShhY3Rpb25zKVxuXG4gIC8vIHNuYXAsIHJlc2l6ZSwgZXRjLlxuICBpbnRlcmFjdC51c2UobW9kaWZpZXJzQmFzZSlcblxuICAvLyBmb3IgYmFja3dyYWRzIGNvbXBhdGliaWxpdHlcbiAgZm9yIChjb25zdCB0eXBlIGluIG1vZGlmaWVycykge1xuICAgIGNvbnN0IHsgX2RlZmF1bHRzLCBfbWV0aG9kcyB9ID0gbW9kaWZpZXJzW3R5cGVdXG5cbiAgICBfZGVmYXVsdHMuX21ldGhvZHMgPSBfbWV0aG9kc1xuICAgIHNjb3BlLmRlZmF1bHRzLnBlckFjdGlvblt0eXBlXSA9IF9kZWZhdWx0c1xuICB9XG5cbiAgLy8gYXV0b1Njcm9sbFxuICBpbnRlcmFjdC51c2UoYXV0b1Njcm9sbClcblxuICAvLyByZWZsb3dcbiAgaW50ZXJhY3QudXNlKHJlZmxvdylcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpbnRlcmFjdC51c2UoZGV2VG9vbHMpXG4gIH1cblxuICByZXR1cm4gaW50ZXJhY3Rcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5pbnRlcmFjdC52ZXJzaW9uID0gaW5pdC52ZXJzaW9uID0gcHJvY2Vzcy5lbnYubnBtX3BhY2thZ2VfdmVyc2lvblxuXG5leHBvcnQgZGVmYXVsdCBpbnRlcmFjdFxuZXhwb3J0IHtcbiAgaW5pdCxcbiAgaW50ZXJhY3QsXG4gIGFjdGlvbnMsXG4gIGF1dG9TY3JvbGwsXG4gIGludGVyYWN0YWJsZVByZXZlbnREZWZhdWx0LFxuICBpbmVydGlhLFxuICBtb2RpZmllcnNCYXNlIGFzIG1vZGlmaWVycyxcbiAgcG9pbnRlckV2ZW50cyxcbiAgcmVmbG93LFxufVxuIl19