import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import restrict from '../restrict/pointer';
test('restrict larger than restriction', (t) => {
    const edges = { left: 0, top: 0, right: 200, bottom: 200 };
    const rect = { ...edges, width: 200, height: 200 };
    const { interaction, } = helpers.testEnv({ rect });
    const restriction = { left: 100, top: 50, right: 150, bottom: 150 };
    const options = {
        ...restrict.defaults,
        restriction,
        elementRect: { left: 0, top: 0, right: 1, bottom: 1 },
    };
    const state = { options, offset: null };
    const arg = {
        interaction,
        state,
        rect,
        startOffset: rect,
        coords: null,
        pageCoords: { x: 0, y: 0 },
    };
    restrict.start(arg);
    arg.coords = { x: 0, y: 0 };
    restrict.set(arg);
    t.deepEqual(arg.coords, { x: 0, y: 0 }, 'allows top and left edge values to be lower than the restriction');
    arg.coords = { x: restriction.left + 10, y: restriction.top + 10 };
    restrict.set(arg);
    t.deepEqual(arg.coords, { x: restriction.left - rect.left, y: restriction.top - rect.top }, 'keeps the top left edge values lower than the restriction');
    arg.coords = { x: restriction.right - rect.right - 10, y: restriction.bottom - rect.right - 10 };
    restrict.set(arg);
    t.deepEqual(arg.coords, { x: restriction.right - rect.right, y: restriction.bottom - rect.right }, 'keeps the bottom right edge values higher than the restriction');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicG9pbnRlci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxRQUFRLE1BQU0scUJBQXFCLENBQUE7QUFFMUMsSUFBSSxDQUFDLGtDQUFrQyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDN0MsTUFBTSxLQUFLLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDMUQsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNsRCxNQUFNLEVBQ0osV0FBVyxHQUNaLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFFN0IsTUFBTSxXQUFXLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDbkUsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLFFBQVEsQ0FBQyxRQUFRO1FBQ3BCLFdBQVc7UUFDWCxXQUFXLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO0tBQ3RELENBQUE7SUFDRCxNQUFNLEtBQUssR0FBRyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDdkMsTUFBTSxHQUFHLEdBQUc7UUFDVixXQUFXO1FBQ1gsS0FBSztRQUNMLElBQUk7UUFDSixXQUFXLEVBQUUsSUFBSTtRQUNqQixNQUFNLEVBQUUsSUFBSTtRQUNaLFVBQVUsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtLQUMzQixDQUFBO0lBRUQsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVuQixHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDM0IsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNqQixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFDZCxrRUFBa0UsQ0FDbkUsQ0FBQTtJQUVELEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxFQUFFLENBQUE7SUFDbEUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNqQixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsRUFBRSxDQUFDLEVBQUUsV0FBVyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFDbEUsMkRBQTJELENBQzVELENBQUE7SUFFRCxHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsQ0FBQTtJQUNoRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ2pCLENBQUMsQ0FBQyxTQUFTLENBQ1QsR0FBRyxDQUFDLE1BQU0sRUFDVixFQUFFLENBQUMsRUFBRSxXQUFXLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUN6RSxnRUFBZ0UsQ0FDakUsQ0FBQTtJQUVELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgcmVzdHJpY3QgZnJvbSAnLi4vcmVzdHJpY3QvcG9pbnRlcidcblxudGVzdCgncmVzdHJpY3QgbGFyZ2VyIHRoYW4gcmVzdHJpY3Rpb24nLCAodCkgPT4ge1xuICBjb25zdCBlZGdlcyA9IHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogMjAwLCBib3R0b206IDIwMCB9XG4gIGNvbnN0IHJlY3QgPSB7IC4uLmVkZ2VzLCB3aWR0aDogMjAwLCBoZWlnaHQ6IDIwMCB9XG4gIGNvbnN0IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgfSA9IGhlbHBlcnMudGVzdEVudih7IHJlY3QgfSlcblxuICBjb25zdCByZXN0cmljdGlvbiA9IHsgbGVmdDogMTAwLCB0b3A6IDUwLCByaWdodDogMTUwLCBib3R0b206IDE1MCB9XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgLi4ucmVzdHJpY3QuZGVmYXVsdHMsXG4gICAgcmVzdHJpY3Rpb24sXG4gICAgZWxlbWVudFJlY3Q6IHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogMSwgYm90dG9tOiAxIH0sXG4gIH1cbiAgY29uc3Qgc3RhdGUgPSB7IG9wdGlvbnMsIG9mZnNldDogbnVsbCB9XG4gIGNvbnN0IGFyZyA9IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBzdGF0ZSxcbiAgICByZWN0LFxuICAgIHN0YXJ0T2Zmc2V0OiByZWN0LFxuICAgIGNvb3JkczogbnVsbCxcbiAgICBwYWdlQ29vcmRzOiB7IHg6IDAsIHk6IDAgfSxcbiAgfVxuXG4gIHJlc3RyaWN0LnN0YXJ0KGFyZylcblxuICBhcmcuY29vcmRzID0geyB4OiAwLCB5OiAwIH1cbiAgcmVzdHJpY3Quc2V0KGFyZylcbiAgdC5kZWVwRXF1YWwoXG4gICAgYXJnLmNvb3JkcyxcbiAgICB7IHg6IDAsIHk6IDAgfSxcbiAgICAnYWxsb3dzIHRvcCBhbmQgbGVmdCBlZGdlIHZhbHVlcyB0byBiZSBsb3dlciB0aGFuIHRoZSByZXN0cmljdGlvbidcbiAgKVxuXG4gIGFyZy5jb29yZHMgPSB7IHg6IHJlc3RyaWN0aW9uLmxlZnQgKyAxMCwgeTogcmVzdHJpY3Rpb24udG9wICsgMTAgfVxuICByZXN0cmljdC5zZXQoYXJnKVxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHsgeDogcmVzdHJpY3Rpb24ubGVmdCAtIHJlY3QubGVmdCwgeTogcmVzdHJpY3Rpb24udG9wIC0gcmVjdC50b3AgfSxcbiAgICAna2VlcHMgdGhlIHRvcCBsZWZ0IGVkZ2UgdmFsdWVzIGxvd2VyIHRoYW4gdGhlIHJlc3RyaWN0aW9uJ1xuICApXG5cbiAgYXJnLmNvb3JkcyA9IHsgeDogcmVzdHJpY3Rpb24ucmlnaHQgLSByZWN0LnJpZ2h0IC0gMTAsIHk6IHJlc3RyaWN0aW9uLmJvdHRvbSAtIHJlY3QucmlnaHQgLSAxMCB9XG4gIHJlc3RyaWN0LnNldChhcmcpXG4gIHQuZGVlcEVxdWFsKFxuICAgIGFyZy5jb29yZHMsXG4gICAgeyB4OiByZXN0cmljdGlvbi5yaWdodCAtIHJlY3QucmlnaHQsIHk6IHJlc3RyaWN0aW9uLmJvdHRvbSAtIHJlY3QucmlnaHQgfSxcbiAgICAna2VlcHMgdGhlIGJvdHRvbSByaWdodCBlZGdlIHZhbHVlcyBoaWdoZXIgdGhhbiB0aGUgcmVzdHJpY3Rpb24nXG4gIClcblxuICB0LmVuZCgpXG59KVxuIl19