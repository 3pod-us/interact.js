import extend from '@interactjs/utils/extend';
import * as is from '@interactjs/utils/is';
import rectUtils from '@interactjs/utils/rect';
function start({ rect, startOffset, state, interaction, pageCoords }) {
    const { options } = state;
    const { elementRect } = options;
    const offset = extend({
        left: 0,
        top: 0,
        right: 0,
        bottom: 0,
    }, options.offset || {});
    if (rect && elementRect) {
        const restriction = getRestrictionRect(options.restriction, interaction, pageCoords);
        const widthDiff = (restriction.right - restriction.left) - rect.width;
        const heightDiff = (restriction.bottom - restriction.top) - rect.height;
        if (widthDiff < 0) {
            offset.left += widthDiff;
            offset.right += widthDiff;
        }
        if (heightDiff < 0) {
            offset.top += heightDiff;
            offset.bottom += heightDiff;
        }
        offset.left += startOffset.left - (rect.width * elementRect.left);
        offset.top += startOffset.top - (rect.height * elementRect.top);
        offset.right += startOffset.right - (rect.width * (1 - elementRect.right));
        offset.bottom += startOffset.bottom - (rect.height * (1 - elementRect.bottom));
    }
    state.offset = offset;
}
function set({ coords, interaction, state }) {
    const { options, offset } = state;
    const restriction = getRestrictionRect(options.restriction, interaction, coords);
    if (!restriction) {
        return;
    }
    const rect = rectUtils.xywhToTlbr(restriction);
    coords.x = Math.max(Math.min(rect.right - offset.right, coords.x), rect.left + offset.left);
    coords.y = Math.max(Math.min(rect.bottom - offset.bottom, coords.y), rect.top + offset.top);
}
function getRestrictionRect(value, interaction, coords) {
    if (is.func(value)) {
        return rectUtils.resolveRectLike(value, interaction.interactable, interaction.element, [coords.x, coords.y, interaction]);
    }
    else {
        return rectUtils.resolveRectLike(value, interaction.interactable, interaction.element);
    }
}
const defaults = {
    restriction: null,
    elementRect: null,
    offset: null,
    endOnly: false,
    enabled: false,
};
const restrict = {
    start,
    set,
    getRestrictionRect,
    defaults,
};
export default restrict;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9pbnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInBvaW50ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxNQUFNLE1BQU0sMEJBQTBCLENBQUE7QUFDN0MsT0FBTyxLQUFLLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUMxQyxPQUFPLFNBQVMsTUFBTSx3QkFBd0IsQ0FBQTtBQWE5QyxTQUFTLEtBQUssQ0FBRSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUU7SUFDbkUsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLEtBQUssQ0FBQTtJQUN6QixNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsT0FBTyxDQUFBO0lBQy9CLE1BQU0sTUFBTSxHQUFrQixNQUFNLENBQUM7UUFDbkMsSUFBSSxFQUFFLENBQUM7UUFDUCxHQUFHLEVBQUUsQ0FBQztRQUNOLEtBQUssRUFBRSxDQUFDO1FBQ1IsTUFBTSxFQUFFLENBQUM7S0FDVixFQUFFLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUE7SUFFeEIsSUFBSSxJQUFJLElBQUksV0FBVyxFQUFFO1FBQ3ZCLE1BQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFBO1FBQ3BGLE1BQU0sU0FBUyxHQUFHLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQTtRQUNyRSxNQUFNLFVBQVUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUE7UUFFdkUsSUFBSSxTQUFTLEdBQUcsQ0FBQyxFQUFFO1lBQ2pCLE1BQU0sQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFBO1lBQ3hCLE1BQU0sQ0FBQyxLQUFLLElBQUks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QTtBQUVELGVBQWUsUUFBUSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGV4dGVuZCBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9leHRlbmQnXG5pbXBvcnQgKiBhcyBpcyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9pcydcbmltcG9ydCByZWN0VXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvcmVjdCdcblxuZXhwb3J0IGludGVyZmFjZSBSZXN0cmljdE9wdGlvbnMge1xuICAvLyB3aGVyZSB0byBkcmFnIG92ZXJcbiAgcmVzdHJpY3Rpb246IEludGVyYWN0LlJlY3RSZXNvbHZhYmxlPFtudW1iZXIsIG51bWJlciwgSW50ZXJhY3QuSW50ZXJhY3Rpb25dPlxuICAvLyB3aGF0IHBhcnQgb2Ygc2VsZiBpcyBhbGxvd2VkIHRvIGRyYWcgb3ZlclxuICBlbGVtZW50UmVjdDogSW50ZXJhY3QuUmVjdFxuICBvZmZzZXQ6IEludGVyYWN0LlJlY3RcbiAgLy8gcmVzdHJpY3QganVzdCBiZWZvcmUgdGhlIGVuZCBkcmFnXG4gIGVuZE9ubHk6IGJvb2xlYW5cbiAgZW5hYmxlZDogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBzdGFydCAoeyByZWN0LCBzdGFydE9mZnNldCwgc3RhdGUsIGludGVyYWN0aW9uLCBwYWdlQ29vcmRzIH0pIHtcbiAgY29uc3QgeyBvcHRpb25zIH0gPSBzdGF0ZVxuICBjb25zdCB7IGVsZW1lbnRSZWN0IH0gPSBvcHRpb25zXG4gIGNvbnN0IG9mZnNldDogSW50ZXJhY3QuUmVjdCA9IGV4dGVuZCh7XG4gICAgbGVmdDogMCxcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICB9LCBvcHRpb25zLm9mZnNldCB8fCB7fSlcblxuICBpZiAocmVjdCAmJiBlbGVtZW50UmVjdCkge1xuICAgIGNvbnN0IHJlc3RyaWN0aW9uID0gZ2V0UmVzdHJpY3Rpb25SZWN0KG9wdGlvbnMucmVzdHJpY3Rpb24sIGludGVyYWN0aW9uLCBwYWdlQ29vcmRzKVxuICAgIGNvbnN0IHdpZHRoRGlmZiA9IChyZXN0cmljdGlvbi5yaWdodCAtIHJlc3RyaWN0aW9uLmxlZnQpIC0gcmVjdC53aWR0aFxuICAgIGNvbnN0IGhlaWdodERpZmYgPSAocmVzdHJpY3Rpb24uYm90dG9tIC0gcmVzdHJpY3Rpb24udG9wKSAtIHJlY3QuaGVpZ2h0XG5cbiAgICBpZiAod2lkdGhEaWZmIDwgMCkge1xuICAgICAgb2Zmc2V0LmxlZnQgKz0gd2lkdGhEaWZmXG4gICAgICBvZmZzZXQucmlnaHQgKz0gd2lkdGhEaWZmXG4gICAgfVxuICAgIGlmIChoZWlnaHREaWZmIDwgMCkge1xuICAgICAgb2Zmc2V0LnRvcCArPSBoZWlnaHREaWZmXG4gICAgICBvZmZzZXQuYm90dG9tICs9IGhlaWdodERpZmZcbiAgICB9XG5cbiAgICBvZmZzZXQubGVmdCArPSBzdGFydE9mZnNldC5sZWZ0IC0gKHJlY3Qud2lkdGggICogZWxlbWVudFJlY3QubGVmdClcbiAgICBvZmZzZXQudG9wICArPSBzdGFydE9mZnNldC50b3AgIC0gKHJlY3QuaGVpZ2h0ICogZWxlbWVudFJlY3QudG9wKVxuXG4gICAgb2Zmc2V0LnJpZ2h0ICArPSBzdGFydE9mZnNldC5yaWdodCAgLSAocmVjdC53aWR0aCAgKiAoMSAtIGVsZW1lbnRSZWN0LnJpZ2h0KSlcbiAgICBvZmZzZXQuYm90dG9tICs9IHN0YXJ0T2Zmc2V0LmJvdHRvbSAtIChyZWN0LmhlaWdodCAqICgxIC0gZWxlbWVudFJlY3QuYm90dG9tKSlcbiAgfVxuXG4gIHN0YXRlLm9mZnNldCA9IG9mZnNldFxufVxuXG5mdW5jdGlvbiBzZXQgKHsgY29vcmRzLCBpbnRlcmFjdGlvbiwgc3RhdGUgfSkge1xuICBjb25zdCB7IG9wdGlvbnMsIG9mZnNldCB9ID0gc3RhdGVcblxuICBjb25zdCByZXN0cmljdGlvbiA9IGdldFJlc3RyaWN0aW9uUmVjdChvcHRpb25zLnJlc3RyaWN0aW9uLCBpbnRlcmFjdGlvbiwgY29vcmRzKVxuXG4gIGlmICghcmVzdHJpY3Rpb24pIHsgcmV0dXJuIH1cblxuICBjb25zdCByZWN0ID0gcmVjdFV0aWxzLnh5d2hUb1RsYnIocmVzdHJpY3Rpb24pXG5cbiAgY29vcmRzLnggPSBNYXRoLm1heChNYXRoLm1pbihyZWN0LnJpZ2h0ICAtIG9mZnNldC5yaWdodCwgY29vcmRzLngpLCByZWN0LmxlZnQgKyBvZmZzZXQubGVmdClcbiAgY29vcmRzLnkgPSBNYXRoLm1heChNYXRoLm1pbihyZWN0LmJvdHRvbSAtIG9mZnNldC5ib3R0b20sIGNvb3Jkcy55KSwgcmVjdC50b3AgICsgb2Zmc2V0LnRvcClcbn1cblxuZnVuY3Rpb24gZ2V0UmVzdHJpY3Rpb25SZWN0ICh2YWx1ZSwgaW50ZXJhY3Rpb24sIGNvb3Jkcz86IEludGVyYWN0LlBvaW50KSB7XG4gIGlmIChpcy5mdW5jKHZhbHVlKSkge1xuICAgIHJldHVybiByZWN0VXRpbHMucmVzb2x2ZVJlY3RMaWtlKHZhbHVlLCBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUsIGludGVyYWN0aW9uLmVsZW1lbnQsIFtjb29yZHMueCwgY29vcmRzLnksIGludGVyYWN0aW9uXSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVjdFV0aWxzLnJlc29sdmVSZWN0TGlrZSh2YWx1ZSwgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlLCBpbnRlcmFjdGlvbi5lbGVtZW50KVxuICB9XG59XG5cbmNvbnN0IGRlZmF1bHRzOiBSZXN0cmljdE9wdGlvbnMgPSB7XG4gIHJlc3RyaWN0aW9uOiBudWxsLFxuICBlbGVtZW50UmVjdDogbnVsbCxcbiAgb2Zmc2V0OiBudWxsLFxuICBlbmRPbmx5OiBmYWxzZSxcbiAgZW5hYmxlZDogZmFsc2UsXG59XG5cbmNvbnN0IHJlc3RyaWN0ID0ge1xuICBzdGFydCxcbiAgc2V0LFxuICBnZXRSZXN0cmljdGlvblJlY3QsXG4gIGRlZmF1bHRzLFxufVxuXG5leHBvcnQgZGVmYXVsdCByZXN0cmljdFxuIl19