import test from '@interactjs/_dev/test/test';
import Interaction from '@interactjs/core/Interaction';
import { mockSignals } from '@interactjs/core/tests/_helpers';
import restrictEdges from '../restrict/edges';
test('restrictEdges', t => {
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.prepared = {};
    interaction.prepared.edges = { top: true, bottom: true, left: true, right: true };
    interaction.resizeRects = {};
    interaction.resizeRects.inverted = { x: 10, y: 20, width: 300, height: 200 };
    interaction._interacting = true;
    const options = { enabled: true };
    const coords = { x: 40, y: 40 };
    const offset = { top: 0, left: 0, bottom: 0, right: 0 };
    const state = { options, offset };
    const arg = { interaction, state };
    arg.coords = { ...coords };
    // outer restriction
    options.outer = { top: 100, left: 100, bottom: 200, right: 200 };
    restrictEdges.set(arg);
    t.deepEqual(arg.coords, { x: coords.y + 60, y: coords.y + 60 }, 'outer restriction is applied correctly');
    arg.coords = { ...coords };
    // inner restriction
    options.outer = null;
    options.inner = { top: 0, left: 0, bottom: 10, right: 10 };
    restrictEdges.set(arg);
    t.deepEqual(arg.coords, { x: coords.x - 40, y: coords.y - 40 }, 'inner restriction is applied correctly');
    // offset
    Object.assign(offset, {
        top: 100,
        left: 100,
        bottom: 200,
        right: 200,
    });
    arg.coords = { ...coords };
    options.outer = { top: 100, left: 100, bottom: 200, right: 200 };
    options.inner = null;
    restrictEdges.set(arg);
    t.deepEqual(arg.coords, { x: coords.x + 160, y: coords.x + 160 }, 'outer restriction is applied correctly with offset');
    // start
    interaction.modifiers = {};
    interaction.modifiers.startOffset = { top: 5, left: 10, bottom: -8, right: -16 };
    interaction.interactable = {
        getRect() {
            return { top: 500, left: 900 };
        },
    };
    options.offset = 'self';
    restrictEdges.start(arg);
    t.deepEqual(arg.state.offset, { top: 505, left: 910, bottom: 508, right: 916 }, 'start gets x/y from selector string');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRnZXMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVkZ2VzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxXQUFXLE1BQU0sOEJBQThCLENBQUE7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFBO0FBQzdELE9BQU8sYUFBYSxNQUFNLG1CQUFtQixDQUFBO0FBRTdDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDeEIsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLEVBQVMsQ0FBQyxDQUFBO0lBQ3RFLFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBUyxDQUFBO0lBQ2hDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFBO0lBQ2pGLFdBQVcsQ0FBQyxXQUFXLEdBQUcsRUFBUyxDQUFBO0lBQ25DLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBUyxDQUFBO0lBQ25GLFdBQVcsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO0lBRS9CLE1BQU0sT0FBTyxHQUFRLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFBO0lBQ3RDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUE7SUFDL0IsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUE7SUFDdkQsTUFBTSxLQUFLLEdBQUcsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUE7SUFDakMsTUFBTSxHQUFHLEdBQUcsRUFBRSxXQUFXLEVBQUUsS0FBSyxFQUFTLENBQUE7SUFFekMsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUE7SUFFMUIsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDaEUsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUV0QixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQ3RDLHdDQUF3QyxDQUN6QyxDQUFBO0lBRUQsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUE7SUFFMUIsb0JBQW9CO0lBQ3BCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFBO0lBQ3BCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUE7SUFDMUQsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUV0QixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQ3RDLHdDQUF3QyxDQUN6QyxDQUFBO0lBRUQsU0FBUztJQUNULE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1FBQ3BCLEdBQUcsRUFBRSxHQUFHO1FBQ1IsSUFBSSxFQUFFLEdBQUc7UUFDVCxNQUFNLEVBQUUsR0FBRztRQUNYLEtBQUssRUFBRSxHQUFHO0tBQ1gsQ0FBQyxDQUFBO0lBQ0YsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsTUFBTSxFQUFFLENBQUE7SUFFMUIsT0FBTyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQTtJQUNoRSxPQUFPLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQTtJQUNwQixhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRXRCLENBQUMsQ0FBQyxTQUFTLENBQ1QsR0FBRyxDQUFDLE1BQU0sRUFDVixFQUFFLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLEVBQUUsRUFDeEMsb0RBQW9ELENBQ3JELENBQUE7SUFFRCxRQUFRO0lBQ1IsV0FBVyxDQUFDLFNBQVMsR0FBRyxFQUFTLENBQUE7SUFDakMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFBO0lBQ2hGLFdBQVcsQ0FBQyxZQUFZLEdBQUc7UUFDekIsT0FBTztZQUNMLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQTtRQUNoQyxDQUFDO0tBQ0ssQ0FBQTtJQUVSLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFBO0lBQ3ZCLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUE7SUFFeEIsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDaEIsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQ2hELHFDQUFxQyxDQUN0QyxDQUFBO0lBRUQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0aW9uJ1xuaW1wb3J0IHsgbW9ja1NpZ25hbHMgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IHJlc3RyaWN0RWRnZXMgZnJvbSAnLi4vcmVzdHJpY3QvZWRnZXMnXG5cbnRlc3QoJ3Jlc3RyaWN0RWRnZXMnLCB0ID0+IHtcbiAgY29uc3QgaW50ZXJhY3Rpb24gPSBuZXcgSW50ZXJhY3Rpb24oeyBzaWduYWxzOiBtb2NrU2lnbmFscygpIH0gYXMgYW55KVxuICBpbnRlcmFjdGlvbi5wcmVwYXJlZCA9IHt9IGFzIGFueVxuICBpbnRlcmFjdGlvbi5wcmVwYXJlZC5lZGdlcyA9IHsgdG9wOiB0cnVlLCBib3R0b206IHRydWUsIGxlZnQ6IHRydWUsIHJpZ2h0OiB0cnVlIH1cbiAgaW50ZXJhY3Rpb24ucmVzaXplUmVjdHMgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24ucmVzaXplUmVjdHMuaW52ZXJ0ZWQgPSB7IHg6IDEwLCB5OiAyMCwgd2lkdGg6IDMwMCwgaGVpZ2h0OiAyMDAgfSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24uX2ludGVyYWN0aW5nID0gdHJ1ZVxuXG4gIGNvbnN0IG9wdGlvbnM6IGFueSA9IHsgZW5hYmxlZDogdHJ1ZSB9XG4gIGNvbnN0IGNvb3JkcyA9IHsgeDogNDAsIHk6IDQwIH1cbiAgY29uc3Qgb2Zmc2V0ID0geyB0b3A6IDAsIGxlZnQ6IDAsIGJvdHRvbTogMCwgcmlnaHQ6IDAgfVxuICBjb25zdCBzdGF0ZSA9IHsgb3B0aW9ucywgb2Zmc2V0IH1cbiAgY29uc3QgYXJnID0geyBpbnRlcmFjdGlvbiwgc3RhdGUgfSBhcyBhbnlcblxuICBhcmcuY29vcmRzID0geyAuLi5jb29yZHMgfVxuXG4gIC8vIG91dGVyIHJlc3RyaWN0aW9uXG4gIG9wdGlvbnMub3V0ZXIgPSB7IHRvcDogMTAwLCBsZWZ0OiAxMDAsIGJvdHRvbTogMjAwLCByaWdodDogMjAwIH1cbiAgcmVzdHJpY3RFZGdlcy5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGFyZy5jb29yZHMsXG4gICAgeyB4OiBjb29yZHMueSArIDYwLCB5OiBjb29yZHMueSArIDYwIH0sXG4gICAgJ291dGVyIHJlc3RyaWN0aW9uIGlzIGFwcGxpZWQgY29ycmVjdGx5J1xuICApXG5cbiAgYXJnLmNvb3JkcyA9IHsgLi4uY29vcmRzIH1cblxuICAvLyBpbm5lciByZXN0cmljdGlvblxuICBvcHRpb25zLm91dGVyID0gbnVsbFxuICBvcHRpb25zLmlubmVyID0geyB0b3A6IDAsIGxlZnQ6IDAsIGJvdHRvbTogMTAsIHJpZ2h0OiAxMCB9XG4gIHJlc3RyaWN0RWRnZXMuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHsgeDogY29vcmRzLnggLSA0MCwgeTogY29vcmRzLnkgLSA0MCB9LFxuICAgICdpbm5lciByZXN0cmljdGlvbiBpcyBhcHBsaWVkIGNvcnJlY3RseSdcbiAgKVxuXG4gIC8vIG9mZnNldFxuICBPYmplY3QuYXNzaWduKG9mZnNldCwge1xuICAgIHRvcDogMTAwLFxuICAgIGxlZnQ6IDEwMCxcbiAgICBib3R0b206IDIwMCxcbiAgICByaWdodDogMjAwLFxuICB9KVxuICBhcmcuY29vcmRzID0geyAuLi5jb29yZHMgfVxuXG4gIG9wdGlvbnMub3V0ZXIgPSB7IHRvcDogMTAwLCBsZWZ0OiAxMDAsIGJvdHRvbTogMjAwLCByaWdodDogMjAwIH1cbiAgb3B0aW9ucy5pbm5lciA9IG51bGxcbiAgcmVzdHJpY3RFZGdlcy5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGFyZy5jb29yZHMsXG4gICAgeyB4OiBjb29yZHMueCArIDE2MCwgeTogY29vcmRzLnggKyAxNjAgfSxcbiAgICAnb3V0ZXIgcmVzdHJpY3Rpb24gaXMgYXBwbGllZCBjb3JyZWN0bHkgd2l0aCBvZmZzZXQnXG4gIClcblxuICAvLyBzdGFydFxuICBpbnRlcmFjdGlvbi5tb2RpZmllcnMgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24ubW9kaWZpZXJzLnN0YXJ0T2Zmc2V0ID0geyB0b3A6IDUsIGxlZnQ6IDEwLCBib3R0b206IC04LCByaWdodDogLTE2IH1cbiAgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlID0ge1xuICAgIGdldFJlY3QgKCkge1xuICAgICAgcmV0dXJuIHsgdG9wOiA1MDAsIGxlZnQ6IDkwMCB9XG4gICAgfSxcbiAgfSBhcyBhbnlcblxuICBvcHRpb25zLm9mZnNldCA9ICdzZWxmJ1xuICByZXN0cmljdEVkZ2VzLnN0YXJ0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuc3RhdGUub2Zmc2V0LFxuICAgIHsgdG9wOiA1MDUsIGxlZnQ6IDkxMCwgYm90dG9tOiA1MDgsIHJpZ2h0OiA5MTYgfSxcbiAgICAnc3RhcnQgZ2V0cyB4L3kgZnJvbSBzZWxlY3RvciBzdHJpbmcnXG4gIClcblxuICB0LmVuZCgpXG59KVxuIl19