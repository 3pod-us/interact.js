import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import rectUtils from '@interactjs/utils/rect';
import base from './../base';
import restrictSize from './../restrict/size';
test('restrictSize', t => {
    const { interaction, } = helpers.testEnv();
    const edges = { left: true, top: true };
    const rect = { left: 0, top: 0, right: 200, bottom: 300 };
    interaction.prepared = { name: null };
    interaction.prepared.edges = edges;
    interaction.resizeRects = {};
    interaction.resizeRects.inverted = rectUtils.xywhToTlbr(rect);
    interaction.modifiers = {};
    interaction._interacting = true;
    const options = {
        min: { width: 60, height: 50 },
        max: { width: 300, height: 350 },
    };
    const startCoords = Object.freeze({ x: 0, y: 0 });
    const offset = { top: 0, bottom: 0, left: 0, right: 0 };
    const state = {
        options,
        offset,
        methods: restrictSize,
    };
    const arg = {
        interaction,
        states: [state],
        coords: startCoords,
        pageCoords: startCoords,
        options,
        state: null,
    };
    interaction.modifiers.startOffset = base.getRectOffset(rect, startCoords);
    base.startAll(arg);
    arg.state = state;
    const move1 = Object.freeze({ x: -50, y: -40 });
    arg.coords = { ...move1 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, move1, 'within both min and max');
    const move2 = Object.freeze({ x: -200, y: -300 });
    arg.coords = { ...move2 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: -100, y: -50 }, 'outside max');
    const move3 = Object.freeze({ x: 250, y: 320 });
    arg.coords = { ...move3 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: 140, y: 250 }, 'outside min');
    // min and max function restrictions
    let minFuncArgs;
    let maxFuncArgs;
    options.min = (...args) => {
        minFuncArgs = args;
        return null;
    };
    options.max = (...args) => {
        maxFuncArgs = args;
        return null;
    };
    restrictSize.set(arg);
    t.deepEqual(minFuncArgs, [arg.coords.x, arg.coords.y, interaction], 'correct args are passed to min function restriction');
    t.deepEqual(maxFuncArgs, [arg.coords.x, arg.coords.y, interaction], 'correct args are passed to max function restriction');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2l6ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDOUMsT0FBTyxJQUFJLE1BQU0sV0FBVyxDQUFBO0FBQzVCLE9BQU8sWUFBWSxNQUFNLG9CQUFvQixDQUFBO0FBRTdDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDdkIsTUFBTSxFQUNKLFdBQVcsR0FDWixHQUFHLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQTtJQUNyQixNQUFNLEtBQUssR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFBO0lBQ3ZDLE1BQU0sSUFBSSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBRXpELFdBQVcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDckMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ2xDLFdBQVcsQ0FBQyxXQUFXLEdBQUcsRUFBUyxDQUFBO0lBQ25DLFdBQVcsQ0FBQyxXQUFXLENBQUMsUUFBUSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDN0QsV0FBVyxDQUFDLFNBQVMsR0FBRyxFQUFTLENBQUE7SUFDakMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsTUFBTSxPQUFPLEdBQUc7UUFDZCxHQUFHLEVBQUUsRUFBRSxLQUFLLEVBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRyxF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SUFBSSxDQUFBO0lBQ2IsQ0FBQyxDQUFBO0lBRUQsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFVLENBQUMsQ0FBQTtJQUU1QixDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsRUFDWCxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxFQUN6QyxxREFBcUQsQ0FDdEQsQ0FBQTtJQUVELENBQUMsQ0FBQyxTQUFTLENBQ1QsV0FBVyxFQUNYLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQ3pDLHFEQUFxRCxDQUN0RCxDQUFBO0lBRUQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCByZWN0VXRpbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvcmVjdCdcbmltcG9ydCBiYXNlIGZyb20gJy4vLi4vYmFzZSdcbmltcG9ydCByZXN0cmljdFNpemUgZnJvbSAnLi8uLi9yZXN0cmljdC9zaXplJ1xuXG50ZXN0KCdyZXN0cmljdFNpemUnLCB0ID0+IHtcbiAgY29uc3Qge1xuICAgIGludGVyYWN0aW9uLFxuICB9ID0gaGVscGVycy50ZXN0RW52KClcbiAgY29uc3QgZWRnZXMgPSB7IGxlZnQ6IHRydWUsIHRvcDogdHJ1ZSB9XG4gIGNvbnN0IHJlY3QgPSB7IGxlZnQ6IDAsIHRvcDogMCwgcmlnaHQ6IDIwMCwgYm90dG9tOiAzMDAgfVxuXG4gIGludGVyYWN0aW9uLnByZXBhcmVkID0geyBuYW1lOiBudWxsIH1cbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQuZWRnZXMgPSBlZGdlc1xuICBpbnRlcmFjdGlvbi5yZXNpemVSZWN0cyA9IHt9IGFzIGFueVxuICBpbnRlcmFjdGlvbi5yZXNpemVSZWN0cy5pbnZlcnRlZCA9IHJlY3RVdGlscy54eXdoVG9UbGJyKHJlY3QpXG4gIGludGVyYWN0aW9uLm1vZGlmaWVycyA9IHt9IGFzIGFueVxuICBpbnRlcmFjdGlvbi5faW50ZXJhY3RpbmcgPSB0cnVlXG5cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtaW46IHsgd2lkdGg6ICA2MCwgaGVpZ2h0OiAgNTAgfSBhcyBhbnksXG4gICAgbWF4OiB7IHdpZHRoOiAzMDAsIGhlaWdodDogMzUwIH0gYXMgYW55LFxuICB9XG4gIGNvbnN0IHN0YXJ0Q29vcmRzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDAsIHk6IDAgfSlcbiAgY29uc3Qgb2Zmc2V0ID0geyB0b3A6IDAsIGJvdHRvbTogMCwgbGVmdDogMCwgcmlnaHQ6IDAgfVxuICBjb25zdCBzdGF0ZSA9IHtcbiAgICBvcHRpb25zLFxuICAgIG9mZnNldCxcbiAgICBtZXRob2RzOiByZXN0cmljdFNpemUsXG4gIH1cbiAgY29uc3QgYXJnOiBhbnkgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgc3RhdGVzOiBbc3RhdGVdLFxuICAgIGNvb3Jkczogc3RhcnRDb29yZHMsXG4gICAgcGFnZUNvb3Jkczogc3RhcnRDb29yZHMsXG4gICAgb3B0aW9ucyxcbiAgICBzdGF0ZTogbnVsbCxcbiAgfVxuXG4gIGludGVyYWN0aW9uLm1vZGlmaWVycy5zdGFydE9mZnNldCA9IGJhc2UuZ2V0UmVjdE9mZnNldChyZWN0LCBzdGFydENvb3JkcylcbiAgYmFzZS5zdGFydEFsbChhcmcpXG4gIGFyZy5zdGF0ZSA9IHN0YXRlXG5cbiAgY29uc3QgbW92ZTEgPSBPYmplY3QuZnJlZXplKHsgeDogLTUwLCB5OiAtNDAgfSlcbiAgYXJnLmNvb3JkcyA9IHsgLi4ubW92ZTEgfVxuICByZXN0cmljdFNpemUuc2V0KGFyZyBhcyBhbnkpXG5cbiAgdC5kZWVwRXF1YWwoYXJnLmNvb3JkcywgbW92ZTEsICd3aXRoaW4gYm90aCBtaW4gYW5kIG1heCcpXG5cbiAgY29uc3QgbW92ZTIgPSBPYmplY3QuZnJlZXplKHsgeDogLTIwMCwgeTogLTMwMCB9KVxuICBhcmcuY29vcmRzID0geyAuLi5tb3ZlMiB9XG4gIHJlc3RyaWN0U2l6ZS5zZXQoYXJnIGFzIGFueSlcblxuICB0LmRlZXBFcXVhbChhcmcuY29vcmRzLCB7IHg6IC0xMDAsIHk6IC01MCB9LCAnb3V0c2lkZSBtYXgnKVxuXG4gIGNvbnN0IG1vdmUzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDI1MCwgeTogMzIwIH0pXG4gIGFyZy5jb29yZHMgPSB7IC4uLm1vdmUzIH1cbiAgcmVzdHJpY3RTaXplLnNldChhcmcgYXMgYW55KVxuXG4gIHQuZGVlcEVxdWFsKGFyZy5jb29yZHMsIHsgeDogMTQwLCB5OiAyNTAgfSwgJ291dHNpZGUgbWluJylcblxuICAvLyBtaW4gYW5kIG1heCBmdW5jdGlvbiByZXN0cmljdGlvbnNcbiAgbGV0IG1pbkZ1bmNBcmdzXG4gIGxldCBtYXhGdW5jQXJnc1xuXG4gIG9wdGlvbnMubWluID0gKC4uLmFyZ3MpID0+IHtcbiAgICBtaW5GdW5jQXJncyA9IGFyZ3NcbiAgICByZXR1cm4gbnVsbFxuICB9XG4gIG9wdGlvbnMubWF4ID0gKC4uLmFyZ3MpID0+IHtcbiAgICBtYXhGdW5jQXJncyA9IGFyZ3NcbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgcmVzdHJpY3RTaXplLnNldChhcmcgYXMgYW55KVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG1pbkZ1bmNBcmdzLFxuICAgIFthcmcuY29vcmRzLngsIGFyZy5jb29yZHMueSwgaW50ZXJhY3Rpb25dLFxuICAgICdjb3JyZWN0IGFyZ3MgYXJlIHBhc3NlZCB0byBtaW4gZnVuY3Rpb24gcmVzdHJpY3Rpb24nLFxuICApXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgbWF4RnVuY0FyZ3MsXG4gICAgW2FyZy5jb29yZHMueCwgYXJnLmNvb3Jkcy55LCBpbnRlcmFjdGlvbl0sXG4gICAgJ2NvcnJlY3QgYXJncyBhcmUgcGFzc2VkIHRvIG1heCBmdW5jdGlvbiByZXN0cmljdGlvbicsXG4gIClcblxuICB0LmVuZCgpXG59KVxuIl19