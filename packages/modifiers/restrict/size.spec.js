import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import rectUtils from '@interactjs/utils/rect';
import base from './../base';
import restrictSize from './../restrict/size';
test('restrictSize', (t) => {
    const { interaction, } = helpers.testEnv();
    const edges = { left: true, top: true };
    const rect = { left: 0, top: 0, right: 200, bottom: 300 };
    interaction.prepared = { name: null };
    interaction.prepared.edges = edges;
    interaction.resizeRects = {};
    interaction.resizeRects.inverted = rectUtils.xywhToTlbr(rect);
    interaction.modifiers = {};
    interaction._interacting = true;
    const options = {
        min: { width: 60, height: 50 },
        max: { width: 300, height: 350 },
    };
    const startCoords = Object.freeze({ x: 0, y: 0 });
    const offset = { top: 0, bottom: 0, left: 0, right: 0 };
    const state = {
        options,
        offset,
        methods: restrictSize,
    };
    const arg = {
        interaction,
        states: [state],
        coords: startCoords,
        pageCoords: startCoords,
        options,
        state: null,
    };
    interaction.modifiers.startOffset = base.getRectOffset(rect, startCoords);
    base.startAll(arg);
    arg.state = state;
    const move1 = Object.freeze({ x: -50, y: -40 });
    arg.coords = { ...move1 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, move1, 'within both min and max');
    const move2 = Object.freeze({ x: -200, y: -300 });
    arg.coords = { ...move2 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: -100, y: -50 }, 'outside max');
    const move3 = Object.freeze({ x: 250, y: 320 });
    arg.coords = { ...move3 };
    restrictSize.set(arg);
    t.deepEqual(arg.coords, { x: 140, y: 250 }, 'outside min');
    // min and max function restrictions
    let minFuncArgs;
    let maxFuncArgs;
    options.min = (...args) => {
        minFuncArgs = args;
        return null;
    };
    options.max = (...args) => {
        maxFuncArgs = args;
        return null;
    };
    restrictSize.set(arg);
    t.deepEqual(minFuncArgs, [arg.coords.x, arg.coords.y, interaction], 'correct args are passed to min function restriction');
    t.deepEqual(maxFuncArgs, [arg.coords.x, arg.coords.y, interaction], 'correct args are passed to max function restriction');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2l6ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxTQUFTLE1BQU0sd0JBQXdCLENBQUE7QUFDOUMsT0FBTyxJQUFJLE1BQU0sV0FBVyxDQUFBO0FBQzVCLE9BQU8sWUFBWSxNQUFNLG9CQUFvQixDQUFBO0FBRTdDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtJQUN6QixNQUFNLEVBQ0osV0FBVyxHQUNaLEdBQUcsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQ3JCLE1BQU0sS0FBSyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFDdkMsTUFBTSxJQUFJLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFFekQsV0FBVyxDQUFDLFFBQVEsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUNyQyxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7SUFDbEMsV0FBVyxDQUFDLFdBQVcsR0FBRyxFQUFTLENBQUE7SUFDbkMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM3RCxXQUFXLENBQUMsU0FBUyxHQUFHLEVBQVMsQ0FBQTtJQUNqQyxXQUFXLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQTtJQUUvQixNQUFNLE9BQU8sR0FBRztRQUNkLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRyxFQUFFLEVBQUUsTUFBTSxF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T0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLENBQUE7SUFFRCxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRXJCLENBQUMsQ0FBQyxTQUFTLENBQ1QsV0FBVyxFQUNYLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLEVBQ3pDLHFEQUFxRCxDQUN0RCxDQUFBO0lBRUQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLEVBQ1gsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsRUFDekMscURBQXFELENBQ3RELENBQUE7SUFFRCxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IHJlY3RVdGlscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9yZWN0J1xuaW1wb3J0IGJhc2UgZnJvbSAnLi8uLi9iYXNlJ1xuaW1wb3J0IHJlc3RyaWN0U2l6ZSBmcm9tICcuLy4uL3Jlc3RyaWN0L3NpemUnXG5cbnRlc3QoJ3Jlc3RyaWN0U2l6ZScsICh0KSA9PiB7XG4gIGNvbnN0IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgfSA9IGhlbHBlcnMudGVzdEVudigpXG4gIGNvbnN0IGVkZ2VzID0geyBsZWZ0OiB0cnVlLCB0b3A6IHRydWUgfVxuICBjb25zdCByZWN0ID0geyBsZWZ0OiAwLCB0b3A6IDAsIHJpZ2h0OiAyMDAsIGJvdHRvbTogMzAwIH1cblxuICBpbnRlcmFjdGlvbi5wcmVwYXJlZCA9IHsgbmFtZTogbnVsbCB9XG4gIGludGVyYWN0aW9uLnByZXBhcmVkLmVkZ2VzID0gZWRnZXNcbiAgaW50ZXJhY3Rpb24ucmVzaXplUmVjdHMgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24ucmVzaXplUmVjdHMuaW52ZXJ0ZWQgPSByZWN0VXRpbHMueHl3aFRvVGxicihyZWN0KVxuICBpbnRlcmFjdGlvbi5tb2RpZmllcnMgPSB7fSBhcyBhbnlcbiAgaW50ZXJhY3Rpb24uX2ludGVyYWN0aW5nID0gdHJ1ZVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgbWluOiB7IHdpZHRoOiAgNjAsIGhlaWdodDogIDUwIH0gYXMgYW55LFxuICAgIG1heDogeyB3aWR0aDogMzAwLCBoZWlnaHQ6IDM1MCB9IGFzIGFueSxcbiAgfVxuICBjb25zdCBzdGFydENvb3JkcyA9IE9iamVjdC5mcmVlemUoeyB4OiAwLCB5OiAwIH0pXG4gIGNvbnN0IG9mZnNldCA9IHsgdG9wOiAwLCBib3R0b206IDAsIGxlZnQ6IDAsIHJpZ2h0OiAwIH1cbiAgY29uc3Qgc3RhdGUgPSB7XG4gICAgb3B0aW9ucyxcbiAgICBvZmZzZXQsXG4gICAgbWV0aG9kczogcmVzdHJpY3RTaXplLFxuICB9XG4gIGNvbnN0IGFyZyA9IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBzdGF0ZXM6IFtzdGF0ZV0sXG4gICAgY29vcmRzOiBzdGFydENvb3JkcyxcbiAgICBwYWdlQ29vcmRzOiBzdGFydENvb3JkcyxcbiAgICBvcHRpb25zLFxuICAgIHN0YXRlOiBudWxsLFxuICB9XG5cbiAgaW50ZXJhY3Rpb24ubW9kaWZpZXJzLnN0YXJ0T2Zmc2V0ID0gYmFzZS5nZXRSZWN0T2Zmc2V0KHJlY3QsIHN0YXJ0Q29vcmRzKVxuICBiYXNlLnN0YXJ0QWxsKGFyZylcbiAgYXJnLnN0YXRlID0gc3RhdGVcblxuICBjb25zdCBtb3ZlMSA9IE9iamVjdC5mcmVlemUoeyB4OiAtNTAsIHk6IC00MCB9KVxuICBhcmcuY29vcmRzID0geyAuLi5tb3ZlMSB9XG4gIHJlc3RyaWN0U2l6ZS5zZXQoYXJnKVxuXG4gIHQuZGVlcEVxdWFsKGFyZy5jb29yZHMsIG1vdmUxLCAnd2l0aGluIGJvdGggbWluIGFuZCBtYXgnKVxuXG4gIGNvbnN0IG1vdmUyID0gT2JqZWN0LmZyZWV6ZSh7IHg6IC0yMDAsIHk6IC0zMDAgfSlcbiAgYXJnLmNvb3JkcyA9IHsgLi4ubW92ZTIgfVxuICByZXN0cmljdFNpemUuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChhcmcuY29vcmRzLCB7IHg6IC0xMDAsIHk6IC01MCB9LCAnb3V0c2lkZSBtYXgnKVxuXG4gIGNvbnN0IG1vdmUzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDI1MCwgeTogMzIwIH0pXG4gIGFyZy5jb29yZHMgPSB7IC4uLm1vdmUzIH1cbiAgcmVzdHJpY3RTaXplLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoYXJnLmNvb3JkcywgeyB4OiAxNDAsIHk6IDI1MCB9LCAnb3V0c2lkZSBtaW4nKVxuXG4gIC8vIG1pbiBhbmQgbWF4IGZ1bmN0aW9uIHJlc3RyaWN0aW9uc1xuICBsZXQgbWluRnVuY0FyZ3NcbiAgbGV0IG1heEZ1bmNBcmdzXG5cbiAgb3B0aW9ucy5taW4gPSAoLi4uYXJncykgPT4ge1xuICAgIG1pbkZ1bmNBcmdzID0gYXJnc1xuICAgIHJldHVybiBudWxsXG4gIH1cbiAgb3B0aW9ucy5tYXggPSAoLi4uYXJncykgPT4ge1xuICAgIG1heEZ1bmNBcmdzID0gYXJnc1xuICAgIHJldHVybiBudWxsXG4gIH1cblxuICByZXN0cmljdFNpemUuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBtaW5GdW5jQXJncyxcbiAgICBbYXJnLmNvb3Jkcy54LCBhcmcuY29vcmRzLnksIGludGVyYWN0aW9uXSxcbiAgICAnY29ycmVjdCBhcmdzIGFyZSBwYXNzZWQgdG8gbWluIGZ1bmN0aW9uIHJlc3RyaWN0aW9uJyxcbiAgKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIG1heEZ1bmNBcmdzLFxuICAgIFthcmcuY29vcmRzLngsIGFyZy5jb29yZHMueSwgaW50ZXJhY3Rpb25dLFxuICAgICdjb3JyZWN0IGFyZ3MgYXJlIHBhc3NlZCB0byBtYXggZnVuY3Rpb24gcmVzdHJpY3Rpb24nLFxuICApXG5cbiAgdC5lbmQoKVxufSlcbiJdfQ==