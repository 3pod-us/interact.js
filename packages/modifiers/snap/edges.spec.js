import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import snapEdges from '../snap/edges';
test('modifiers/snap/edges', t => {
    const rect = { top: 0, left: 0, bottom: 100, right: 100 };
    const { interaction, interactable, } = helpers.testEnv({ rect });
    interaction.interactable = interactable;
    interaction._interacting = true;
    const target0 = Object.freeze({
        left: 50,
        right: 150,
        top: 0,
        bottom: 100,
    });
    const options = {
        targets: [
            { ...target0 },
        ],
        range: Infinity,
    };
    const pageCoords = Object.freeze({ x: 0, y: 0 });
    const arg = {
        interaction,
        interactable: interaction.interactable,
        state: null,
        pageCoords,
        coords: { ...pageCoords },
        offset: [{ x: 0, y: 0 }],
    };
    // resize from top left
    interaction.prepared.edges = { top: true, left: true };
    arg.state = { options };
    snapEdges.start(arg);
    snapEdges.set(arg);
    t.deepEqual(arg.coords, { x: target0.left, y: target0.top }, 'modified coords are correct');
    // resize from bottom right
    interaction.prepared.edges = { bottom: true, right: true };
    arg.state = { options };
    snapEdges.start(arg);
    snapEdges.set(arg);
    t.deepEqual(arg.coords, { x: target0.right, y: target0.bottom }, 'modified coord are correct');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWRnZXMuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImVkZ2VzLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxJQUFJLE1BQU0sNEJBQTRCLENBQUE7QUFDN0MsT0FBTyxLQUFLLE9BQU8sTUFBTSxpQ0FBaUMsQ0FBQTtBQUMxRCxPQUFPLFNBQVMsTUFBTSxlQUFlLENBQUE7QUFFckMsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQy9CLE1BQU0sSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQ3pELE1BQU0sRUFDSixXQUFXLEVBQ1gsWUFBWSxHQUNiLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUE7SUFDN0IsV0FBVyxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUE7SUFDdkMsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7SUFFL0IsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUM1QixJQUFJLEVBQUUsRUFBRTtRQUNSLEtBQUssRUFBRSxHQUFHO1FBQ1YsR0FBRyxFQUFFLENBQUM7UUFDTixNQUFNLEVBQUUsR0FBRztLQUNaLENBQUMsQ0FBQTtJQUNGLE1BQU0sT0FBTyxHQUFHO1FBQ2QsT0FBTyxFQUFFO1lBQ1AsRUFBRSxHQUFHLE9BQU8sRUFBRTtTQUNmO1FBQ0QsS0FBSyxFQUFFLFFBQVE7S0FDaEIsQ0FBQTtJQUNELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2hELE1BQU0sR0FBRyxHQUFHO1FBQ1YsV0FBVztRQUNYLFlBQVksRUFBRSxXQUFXLENBQUMsWUFBWTtRQUN0QyxLQUFLLEVBQUUsSUFBSTtRQUNYLFVBQVU7UUFDVixNQUFNLEVBQUUsRUFBRSxHQUFHLFVBQVUsRUFBRTtRQUN6QixNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDO0tBQ3pCLENBQUE7SUFFRCx1QkFBdUI7SUFDdkIsV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQTtJQUV0RCxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUE7SUFDdkIsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFVLENBQUMsQ0FBQTtJQUMzQixTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBRWxCLENBQUMsQ0FBQyxTQUFTLENBQ1QsR0FBRyxDQUFDLE1BQU0sRUFDVixFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQ25DLDZCQUE2QixDQUFDLENBQUE7SUFFaEMsMkJBQTJCO0lBQzNCLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUE7SUFFMUQsR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLE9BQU8sRUFBRSxDQUFBO0lBQ3ZCLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBVSxDQUFDLENBQUE7SUFDM0IsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVsQixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUN2Qyw0QkFBNEIsQ0FBQyxDQUFBO0lBRS9CLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgc25hcEVkZ2VzIGZyb20gJy4uL3NuYXAvZWRnZXMnXG5cbnRlc3QoJ21vZGlmaWVycy9zbmFwL2VkZ2VzJywgdCA9PiB7XG4gIGNvbnN0IHJlY3QgPSB7IHRvcDogMCwgbGVmdDogMCwgYm90dG9tOiAxMDAsIHJpZ2h0OiAxMDAgfVxuICBjb25zdCB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgaW50ZXJhY3RhYmxlLFxuICB9ID0gaGVscGVycy50ZXN0RW52KHsgcmVjdCB9KVxuICBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUgPSBpbnRlcmFjdGFibGVcbiAgaW50ZXJhY3Rpb24uX2ludGVyYWN0aW5nID0gdHJ1ZVxuXG4gIGNvbnN0IHRhcmdldDAgPSBPYmplY3QuZnJlZXplKHtcbiAgICBsZWZ0OiA1MCxcbiAgICByaWdodDogMTUwLFxuICAgIHRvcDogMCxcbiAgICBib3R0b206IDEwMCxcbiAgfSlcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICB0YXJnZXRzOiBbXG4gICAgICB7IC4uLnRhcmdldDAgfSxcbiAgICBdLFxuICAgIHJhbmdlOiBJbmZpbml0eSxcbiAgfVxuICBjb25zdCBwYWdlQ29vcmRzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDAsIHk6IDAgfSlcbiAgY29uc3QgYXJnID0ge1xuICAgIGludGVyYWN0aW9uLFxuICAgIGludGVyYWN0YWJsZTogaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlLFxuICAgIHN0YXRlOiBudWxsLFxuICAgIHBhZ2VDb29yZHMsXG4gICAgY29vcmRzOiB7IC4uLnBhZ2VDb29yZHMgfSxcbiAgICBvZmZzZXQ6IFt7IHg6IDAsIHk6IDAgfV0sXG4gIH1cblxuICAvLyByZXNpemUgZnJvbSB0b3AgbGVmdFxuICBpbnRlcmFjdGlvbi5wcmVwYXJlZC5lZGdlcyA9IHsgdG9wOiB0cnVlLCBsZWZ0OiB0cnVlIH1cblxuICBhcmcuc3RhdGUgPSB7IG9wdGlvbnMgfVxuICBzbmFwRWRnZXMuc3RhcnQoYXJnIGFzIGFueSlcbiAgc25hcEVkZ2VzLnNldChhcmcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgYXJnLmNvb3JkcyxcbiAgICB7IHg6IHRhcmdldDAubGVmdCwgeTogdGFyZ2V0MC50b3AgfSxcbiAgICAnbW9kaWZpZWQgY29vcmRzIGFyZSBjb3JyZWN0JylcblxuICAvLyByZXNpemUgZnJvbSBib3R0b20gcmlnaHRcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQuZWRnZXMgPSB7IGJvdHRvbTogdHJ1ZSwgcmlnaHQ6IHRydWUgfVxuXG4gIGFyZy5zdGF0ZSA9IHsgb3B0aW9ucyB9XG4gIHNuYXBFZGdlcy5zdGFydChhcmcgYXMgYW55KVxuICBzbmFwRWRnZXMuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHsgeDogdGFyZ2V0MC5yaWdodCwgeTogdGFyZ2V0MC5ib3R0b20gfSxcbiAgICAnbW9kaWZpZWQgY29vcmQgYXJlIGNvcnJlY3QnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=