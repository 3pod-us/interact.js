import test from '@interactjs/_dev/test/test';
import Interaction from '@interactjs/core/Interaction';
import { mockInteractable, mockSignals } from '@interactjs/core/tests/_helpers';
import snapSize from '../snap/size';
test('modifiers/snapSize', t => {
    const interaction = new Interaction({ signals: mockSignals() });
    interaction.interactable = mockInteractable();
    interaction.interactable.getRect = () => ({ top: 0, left: 0, bottom: 100, right: 100 });
    interaction.prepared = {
        name: null,
        edges: { top: true, left: true, bottom: false, right: false },
    };
    interaction._interacting = true;
    const target0 = Object.freeze({ x: 50, y: 100 });
    const options = {
        targets: [
            { ...target0 },
        ],
        range: Infinity,
    };
    const state = {
        options,
        delta: { x: 0, y: 0 },
        offset: [{ x: 0, y: 0 }],
    };
    const pageCoords = Object.freeze({ x: 10, y: 20 });
    const arg = {
        interaction,
        interactable: interaction.interactable,
        state,
        pageCoords,
        coords: { ...pageCoords },
    };
    snapSize.start(arg);
    snapSize.set(arg);
    t.deepEqual(arg.coords, target0, 'snapSize.set single target, zereo offset');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2l6ZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2l6ZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sV0FBVyxNQUFNLDhCQUE4QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQTtBQUMvRSxPQUFPLFFBQVEsTUFBTSxjQUFjLENBQUE7QUFFbkMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQzdCLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxDQUFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxFQUFTLENBQUMsQ0FBQTtJQUN0RSxXQUFXLENBQUMsWUFBWSxHQUFHLGdCQUFnQixFQUFFLENBQUE7SUFDN0MsV0FBVyxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQVUsQ0FBQSxDQUFBO0lBQzlGLFdBQVcsQ0FBQyxRQUFRLEdBQUc7UUFDckIsSUFBSSxFQUFFLElBQUk7UUFDVixLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFO0tBQzlELENBQUE7SUFDRCxXQUFXLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQTtJQUUvQixNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQTtJQUNsRCxNQUFNLE9BQU8sR0FBRztRQUNkLE9BQU8sRUFBRTtZQUNQLEVBQUUsR0FBRyxPQUFPLEVBQUU7U0FDZjtRQUNELEtBQUssRUFBRSxRQUFRO0tBQ2hCLENBQUE7SUFDRCxNQUFNLEtBQUssR0FBRztRQUNaLE9BQU87UUFDUCxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDckIsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztLQUN6QixDQUFBO0lBQ0QsTUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDbEQsTUFBTSxHQUFHLEdBQUc7UUFDVixXQUFXO1FBQ1gsWUFBWSxFQUFFLFdBQVcsQ0FBQyxZQUFZO1FBQ3RDLEtBQUs7UUFDTCxVQUFVO1FBQ1YsTUFBTSxFQUFFLEVBQUUsR0FBRyxVQUFVLEVBQUU7S0FDMUIsQ0FBQTtJQUVELFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBVSxDQUFDLENBQUE7SUFDMUIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUVqQixDQUFDLENBQUMsU0FBUyxDQUNULEdBQUcsQ0FBQyxNQUFNLEVBQ1YsT0FBTyxFQUNQLDBDQUEwQyxDQUMzQyxDQUFBO0lBRUQsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCBJbnRlcmFjdGlvbiBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL0ludGVyYWN0aW9uJ1xuaW1wb3J0IHsgbW9ja0ludGVyYWN0YWJsZSwgbW9ja1NpZ25hbHMgfSBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IHNuYXBTaXplIGZyb20gJy4uL3NuYXAvc2l6ZSdcblxudGVzdCgnbW9kaWZpZXJzL3NuYXBTaXplJywgdCA9PiB7XG4gIGNvbnN0IGludGVyYWN0aW9uID0gbmV3IEludGVyYWN0aW9uKHsgc2lnbmFsczogbW9ja1NpZ25hbHMoKSB9IGFzIGFueSlcbiAgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlID0gbW9ja0ludGVyYWN0YWJsZSgpXG4gIGludGVyYWN0aW9uLmludGVyYWN0YWJsZS5nZXRSZWN0ID0gKCkgPT4gKHsgdG9wOiAwLCBsZWZ0OiAwLCBib3R0b206IDEwMCwgcmlnaHQ6IDEwMCB9IGFzIGFueSlcbiAgaW50ZXJhY3Rpb24ucHJlcGFyZWQgPSB7XG4gICAgbmFtZTogbnVsbCxcbiAgICBlZGdlczogeyB0b3A6IHRydWUsIGxlZnQ6IHRydWUsIGJvdHRvbTogZmFsc2UsIHJpZ2h0OiBmYWxzZSB9LFxuICB9XG4gIGludGVyYWN0aW9uLl9pbnRlcmFjdGluZyA9IHRydWVcblxuICBjb25zdCB0YXJnZXQwID0gT2JqZWN0LmZyZWV6ZSh7IHg6ICA1MCwgeTogIDEwMCB9KVxuICBjb25zdCBvcHRpb25zID0ge1xuICAgIHRhcmdldHM6IFtcbiAgICAgIHsgLi4udGFyZ2V0MCB9LFxuICAgIF0sXG4gICAgcmFuZ2U6IEluZmluaXR5LFxuICB9XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIG9wdGlvbnMsXG4gICAgZGVsdGE6IHsgeDogMCwgeTogMCB9LFxuICAgIG9mZnNldDogW3sgeDogMCwgeTogMCB9XSxcbiAgfVxuICBjb25zdCBwYWdlQ29vcmRzID0gT2JqZWN0LmZyZWV6ZSh7IHg6IDEwLCB5OiAyMCB9KVxuICBjb25zdCBhcmcgPSB7XG4gICAgaW50ZXJhY3Rpb24sXG4gICAgaW50ZXJhY3RhYmxlOiBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUsXG4gICAgc3RhdGUsXG4gICAgcGFnZUNvb3JkcyxcbiAgICBjb29yZHM6IHsgLi4ucGFnZUNvb3JkcyB9LFxuICB9XG5cbiAgc25hcFNpemUuc3RhcnQoYXJnIGFzIGFueSlcbiAgc25hcFNpemUuc2V0KGFyZylcblxuICB0LmRlZXBFcXVhbChcbiAgICBhcmcuY29vcmRzLFxuICAgIHRhcmdldDAsXG4gICAgJ3NuYXBTaXplLnNldCBzaW5nbGUgdGFyZ2V0LCB6ZXJlbyBvZmZzZXQnXG4gIClcblxuICB0LmVuZCgpXG59KVxuIl19