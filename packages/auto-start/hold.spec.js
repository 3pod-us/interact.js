import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import Signals from '@interactjs/utils/Signals';
import hold from './hold';
import { autoStart } from './index';
test('autoStart/hold', t => {
    const scope = helpers.mockScope({
        autoStart: {
            defaults: {
                perAction: {},
            },
            signals: new Signals(),
        },
    });
    const autoStartHold = hold;
    scope.usePlugin(autoStart);
    scope.usePlugin(autoStartHold);
    t.equal(scope.defaults.perAction.hold, 0, 'sets scope.defaults.perAction.hold');
    t.equal(scope.defaults.perAction.delay, 0, 'backwards compatible "delay" alias.');
    const holdDuration = 1000;
    const actionName = 'TEST_ACTION';
    const interaction = {
        interactable: { options: { [actionName]: { hold: holdDuration } } },
        prepared: { name: actionName },
    };
    t.equal(autoStartHold.getHoldDuration(interaction), holdDuration, 'gets holdDuration');
    const delayDuration = 500;
    interaction.interactable.options[actionName].delay = delayDuration;
    delete interaction.interactable.options[actionName].hold;
    t.equal(autoStartHold.getHoldDuration(interaction), delayDuration, 'gets holdDuration from "delay" value');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sZC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiaG9sZC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxPQUFPLE1BQU0sMkJBQTJCLENBQUE7QUFDL0MsT0FBTyxJQUFJLE1BQU0sUUFBUSxDQUFBO0FBQ3pCLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFFbkMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3pCLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDOUIsU0FBUyxFQUFFO1lBQ1QsUUFBUSxFQUFFO2dCQUNSLFNBQVMsRUFBRSxFQUFFO2FBQ2Q7WUFDRCxPQUFPLEVBQUUsSUFBSSxPQUFPLEVBQUU7U0FDdkI7S0FDRixDQUFDLENBQUE7SUFDRixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUE7SUFDMUIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUMxQixLQUFLLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBRTlCLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFBO0lBQy9FLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxxQ0FBcUMsQ0FBQyxDQUFBO0lBRWpGLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQTtJQUN6QixNQUFNLFVBQVUsR0FBRyxhQUFhLENBQUE7SUFDaEMsTUFBTSxXQUFXLEdBQVE7UUFDdkIsWUFBWSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFO1FBQ25FLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7S0FDL0IsQ0FBQTtJQUVELENBQUMsQ0FBQyxLQUFLLENBQ0wsYUFBYSxDQUFDLGVBQWUsQ0FBQyxXQUFXLENBQUMsRUFDMUMsWUFBWSxFQUNaLG1CQUFtQixDQUFDLENBQUE7SUFFdEIsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFBO0lBRXpCLFdBQVcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUE7SUFDbEUsT0FBTyxXQUFXLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUE7SUFFeEQsQ0FBQyxDQUFDLEtBQUssQ0FDTCxhQUFhLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxFQUMxQyxhQUFhLEVBQ2Isc0NBQXNDLENBQUMsQ0FBQTtJQUV6QyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IFNpZ25hbHMgZnJvbSAnQGludGVyYWN0anMvdXRpbHMvU2lnbmFscydcbmltcG9ydCBob2xkIGZyb20gJy4vaG9sZCdcbmltcG9ydCB7IGF1dG9TdGFydCB9IGZyb20gJy4vaW5kZXgnXG5cbnRlc3QoJ2F1dG9TdGFydC9ob2xkJywgdCA9PiB7XG4gIGNvbnN0IHNjb3BlID0gaGVscGVycy5tb2NrU2NvcGUoe1xuICAgIGF1dG9TdGFydDoge1xuICAgICAgZGVmYXVsdHM6IHtcbiAgICAgICAgcGVyQWN0aW9uOiB7fSxcbiAgICAgIH0sXG4gICAgICBzaWduYWxzOiBuZXcgU2lnbmFscygpLFxuICAgIH0sXG4gIH0pXG4gIGNvbnN0IGF1dG9TdGFydEhvbGQgPSBob2xkXG4gIHNjb3BlLnVzZVBsdWdpbihhdXRvU3RhcnQpXG4gIHNjb3BlLnVzZVBsdWdpbihhdXRvU3RhcnRIb2xkKVxuXG4gIHQuZXF1YWwoc2NvcGUuZGVmYXVsdHMucGVyQWN0aW9uLmhvbGQsIDAsICdzZXRzIHNjb3BlLmRlZmF1bHRzLnBlckFjdGlvbi5ob2xkJylcbiAgdC5lcXVhbChzY29wZS5kZWZhdWx0cy5wZXJBY3Rpb24uZGVsYXksIDAsICdiYWNrd2FyZHMgY29tcGF0aWJsZSBcImRlbGF5XCIgYWxpYXMuJylcblxuICBjb25zdCBob2xkRHVyYXRpb24gPSAxMDAwXG4gIGNvbnN0IGFjdGlvbk5hbWUgPSAnVEVTVF9BQ1RJT04nXG4gIGNvbnN0IGludGVyYWN0aW9uOiBhbnkgPSB7XG4gICAgaW50ZXJhY3RhYmxlOiB7IG9wdGlvbnM6IHsgW2FjdGlvbk5hbWVdOiB7IGhvbGQ6IGhvbGREdXJhdGlvbiB9IH0gfSxcbiAgICBwcmVwYXJlZDogeyBuYW1lOiBhY3Rpb25OYW1lIH0sXG4gIH1cblxuICB0LmVxdWFsKFxuICAgIGF1dG9TdGFydEhvbGQuZ2V0SG9sZER1cmF0aW9uKGludGVyYWN0aW9uKSxcbiAgICBob2xkRHVyYXRpb24sXG4gICAgJ2dldHMgaG9sZER1cmF0aW9uJylcblxuICBjb25zdCBkZWxheUR1cmF0aW9uID0gNTAwXG5cbiAgaW50ZXJhY3Rpb24uaW50ZXJhY3RhYmxlLm9wdGlvbnNbYWN0aW9uTmFtZV0uZGVsYXkgPSBkZWxheUR1cmF0aW9uXG4gIGRlbGV0ZSBpbnRlcmFjdGlvbi5pbnRlcmFjdGFibGUub3B0aW9uc1thY3Rpb25OYW1lXS5ob2xkXG5cbiAgdC5lcXVhbChcbiAgICBhdXRvU3RhcnRIb2xkLmdldEhvbGREdXJhdGlvbihpbnRlcmFjdGlvbiksXG4gICAgZGVsYXlEdXJhdGlvbixcbiAgICAnZ2V0cyBob2xkRHVyYXRpb24gZnJvbSBcImRlbGF5XCIgdmFsdWUnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=