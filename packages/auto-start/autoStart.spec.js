import test from '@interactjs/_dev/test/test';
import drag from '@interactjs/actions/drag';
import * as helpers from '@interactjs/core/tests/_helpers';
import autoStart from './base';
test('autoStart', t => {
    const rect = { top: 100, left: 200, bottom: 300, right: 400 };
    const { interaction, interactable, event, coords, target: element, } = helpers.testEnv({
        plugins: [autoStart, drag],
        rect,
    });
    interactable.draggable(true);
    interaction.pointerType = coords.pointerType = 'mouse';
    coords.buttons = 1;
    interaction.pointerDown(event, event, element);
    t.deepEqual(interaction.prepared, { name: 'drag', axis: 'xy', edges: undefined }, 'prepares action');
    t.deepEqual(interaction.rect, rect, 'set interaction.rect');
    t.equal(element.style.cursor, 'move', 'sets drag cursor');
    let checkerArgs;
    interactable.draggable({
        cursorChecker(...args) {
            checkerArgs = args;
            return 'custom-cursor';
        },
    });
    interaction.pointerDown(event, event, element);
    t.deepEqual(checkerArgs, [{ name: 'drag', axis: 'xy' }, interactable, element], 'calls cursorChecker with expected args');
    interaction.pointerDown(event, event, element);
    t.equal(element.style.cursor, 'custom-cursor', 'uses cursorChecker value');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b1N0YXJ0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhdXRvU3RhcnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLElBQUksTUFBTSwwQkFBMEIsQ0FBQTtBQUMzQyxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sU0FBUyxNQUFNLFFBQVEsQ0FBQTtBQUU5QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFO0lBQ3BCLE1BQU0sSUFBSSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxDQUFBO0lBQzdELE1BQU0sRUFDSixXQUFXLEVBQ1gsWUFBWSxFQUNaLEtBQUssRUFDTCxNQUFNLEVBQ04sTUFBTSxFQUFFLE9BQU8sR0FDaEIsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBQ2xCLE9BQU8sRUFBRSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUM7UUFDMUIsSUFBSTtLQUNMLENBQUMsQ0FBQTtJQUVGLFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDNUIsV0FBVyxDQUFDLFdBQVcsR0FBRyxNQUFNLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQTtJQUN0RCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQTtJQUVsQixXQUFXLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFOUMsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLENBQUMsUUFBUSxFQUNwQixFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEVBQzlDLGlCQUFpQixDQUNsQixDQUFBO0lBRUQsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLENBQUMsSUFBSSxFQUNoQixJQUFXLEVBQ1gsc0JBQXNCLENBQ3ZCLENBQUE7SUFFRCxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxrQkFBa0IsQ0FBQyxDQUFBO0lBRXpELElBQUksV0FBVyxDQUFBO0lBRWYsWUFBWSxDQUFDLFNBQVMsQ0FBQztRQUNyQixhQUFhLENBQUUsR0FBRyxJQUFJO1lBQ3BCLFdBQVcsR0FBRyxJQUFJLENBQUE7WUFFbEIsT0FBTyxlQUFlLENBQUE7UUFDeEIsQ0FBQztLQUNGLENBQUMsQ0FBQTtJQUVGLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUU5QyxDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsRUFDWCxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxFQUNyRCx3Q0FBd0MsQ0FDekMsQ0FBQTtJQUVELFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM5QyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRSwwQkFBMEIsQ0FBQyxDQUFBO0lBRTFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgZHJhZyBmcm9tICdAaW50ZXJhY3Rqcy9hY3Rpb25zL2RyYWcnXG5pbXBvcnQgKiBhcyBoZWxwZXJzIGZyb20gJ0BpbnRlcmFjdGpzL2NvcmUvdGVzdHMvX2hlbHBlcnMnXG5pbXBvcnQgYXV0b1N0YXJ0IGZyb20gJy4vYmFzZSdcblxudGVzdCgnYXV0b1N0YXJ0JywgdCA9PiB7XG4gIGNvbnN0IHJlY3QgPSB7IHRvcDogMTAwLCBsZWZ0OiAyMDAsIGJvdHRvbTogMzAwLCByaWdodDogNDAwIH1cbiAgY29uc3Qge1xuICAgIGludGVyYWN0aW9uLFxuICAgIGludGVyYWN0YWJsZSxcbiAgICBldmVudCxcbiAgICBjb29yZHMsXG4gICAgdGFyZ2V0OiBlbGVtZW50LFxuICB9ID0gaGVscGVycy50ZXN0RW52KHtcbiAgICBwbHVnaW5zOiBbYXV0b1N0YXJ0LCBkcmFnXSxcbiAgICByZWN0LFxuICB9KVxuXG4gIGludGVyYWN0YWJsZS5kcmFnZ2FibGUodHJ1ZSlcbiAgaW50ZXJhY3Rpb24ucG9pbnRlclR5cGUgPSBjb29yZHMucG9pbnRlclR5cGUgPSAnbW91c2UnXG4gIGNvb3Jkcy5idXR0b25zID0gMVxuXG4gIGludGVyYWN0aW9uLnBvaW50ZXJEb3duKGV2ZW50LCBldmVudCwgZWxlbWVudClcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5wcmVwYXJlZCxcbiAgICB7IG5hbWU6ICdkcmFnJywgYXhpczogJ3h5JywgZWRnZXM6IHVuZGVmaW5lZCB9LFxuICAgICdwcmVwYXJlcyBhY3Rpb24nXG4gIClcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5yZWN0LFxuICAgIHJlY3QgYXMgYW55LFxuICAgICdzZXQgaW50ZXJhY3Rpb24ucmVjdCdcbiAgKVxuXG4gIHQuZXF1YWwoZWxlbWVudC5zdHlsZS5jdXJzb3IsICdtb3ZlJywgJ3NldHMgZHJhZyBjdXJzb3InKVxuXG4gIGxldCBjaGVja2VyQXJnc1xuXG4gIGludGVyYWN0YWJsZS5kcmFnZ2FibGUoe1xuICAgIGN1cnNvckNoZWNrZXIgKC4uLmFyZ3MpIHtcbiAgICAgIGNoZWNrZXJBcmdzID0gYXJnc1xuXG4gICAgICByZXR1cm4gJ2N1c3RvbS1jdXJzb3InXG4gICAgfSxcbiAgfSlcblxuICBpbnRlcmFjdGlvbi5wb2ludGVyRG93bihldmVudCwgZXZlbnQsIGVsZW1lbnQpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgY2hlY2tlckFyZ3MsXG4gICAgW3sgbmFtZTogJ2RyYWcnLCBheGlzOiAneHknIH0sIGludGVyYWN0YWJsZSwgZWxlbWVudF0sXG4gICAgJ2NhbGxzIGN1cnNvckNoZWNrZXIgd2l0aCBleHBlY3RlZCBhcmdzJ1xuICApXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24oZXZlbnQsIGV2ZW50LCBlbGVtZW50KVxuICB0LmVxdWFsKGVsZW1lbnQuc3R5bGUuY3Vyc29yLCAnY3VzdG9tLWN1cnNvcicsICd1c2VzIGN1cnNvckNoZWNrZXIgdmFsdWUnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=