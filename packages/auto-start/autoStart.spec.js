import test from '@interactjs/_dev/test/test';
import drag from '@interactjs/actions/drag';
import * as helpers from '@interactjs/core/tests/_helpers';
import autoStart from './base';
test('autoStart', (t) => {
    const rect = { top: 100, left: 200, bottom: 300, right: 400 };
    const { interaction, interactable, event, coords, target: element, } = helpers.testEnv({
        plugins: [autoStart, drag],
        rect,
    });
    interactable.draggable(true);
    interaction.pointerType = coords.pointerType = 'mouse';
    coords.buttons = 1;
    interaction.pointerDown(event, event, element);
    t.deepEqual(interaction.prepared, { name: 'drag', axis: 'xy', edges: undefined }, 'prepares action');
    t.deepEqual(interaction.rect, rect, 'set interaction.rect');
    t.equal(element.style.cursor, 'move', 'sets drag cursor');
    let checkerArgs;
    interactable.draggable({
        cursorChecker(...args) {
            checkerArgs = args;
            return 'custom-cursor';
        },
    });
    interaction.pointerDown(event, event, element);
    t.deepEqual(checkerArgs, [{ name: 'drag', axis: 'xy' }, interactable, element], 'calls cursorChecker with expected args');
    interaction.pointerDown(event, event, element);
    t.equal(element.style.cursor, 'custom-cursor', 'uses cursorChecker value');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b1N0YXJ0LnNwZWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhdXRvU3RhcnQuc3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLElBQUksTUFBTSw0QkFBNEIsQ0FBQTtBQUM3QyxPQUFPLElBQUksTUFBTSwwQkFBMEIsQ0FBQTtBQUMzQyxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sU0FBUyxNQUFNLFFBQVEsQ0FBQTtBQUU5QixJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7SUFDdEIsTUFBTSxJQUFJLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDN0QsTUFBTSxFQUNKLFdBQVcsRUFDWCxZQUFZLEVBQ1osS0FBSyxFQUNMLE1BQU0sRUFDTixNQUFNLEVBQUUsT0FBTyxHQUNoQixHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7UUFDbEIsT0FBTyxFQUFFLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQztRQUMxQixJQUFJO0tBQ0wsQ0FBQyxDQUFBO0lBRUYsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUM1QixXQUFXLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFBO0lBQ3RELE1BQU0sQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFBO0lBRWxCLFdBQVcsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUU5QyxDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsQ0FBQyxRQUFRLEVBQ3BCLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsRUFDOUMsaUJBQWlCLENBQ2xCLENBQUE7SUFFRCxDQUFDLENBQUMsU0FBUyxDQUNULFdBQVcsQ0FBQyxJQUFJLEVBQ2hCLElBQVcsRUFDWCxzQkFBc0IsQ0FDdkIsQ0FBQTtJQUVELENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGtCQUFrQixDQUFDLENBQUE7SUFFekQsSUFBSSxXQUFXLENBQUE7SUFFZixZQUFZLENBQUMsU0FBUyxDQUFDO1FBQ3JCLGFBQWEsQ0FBRSxHQUFHLElBQUk7WUFDcEIsV0FBVyxHQUFHLElBQUksQ0FBQTtZQUVsQixPQUFPLGVBQWUsQ0FBQTtRQUN4QixDQUFDO0tBQ0YsQ0FBQyxDQUFBO0lBRUYsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBRTlDLENBQUMsQ0FBQyxTQUFTLENBQ1QsV0FBVyxFQUNYLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLEVBQ3JELHdDQUF3QyxDQUN6QyxDQUFBO0lBRUQsV0FBVyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQzlDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsZUFBZSxFQUFFLDBCQUEwQixDQUFDLENBQUE7SUFFMUUsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFBO0FBQ1QsQ0FBQyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tICdAaW50ZXJhY3Rqcy9fZGV2L3Rlc3QvdGVzdCdcbmltcG9ydCBkcmFnIGZyb20gJ0BpbnRlcmFjdGpzL2FjdGlvbnMvZHJhZydcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCBhdXRvU3RhcnQgZnJvbSAnLi9iYXNlJ1xuXG50ZXN0KCdhdXRvU3RhcnQnLCAodCkgPT4ge1xuICBjb25zdCByZWN0ID0geyB0b3A6IDEwMCwgbGVmdDogMjAwLCBib3R0b206IDMwMCwgcmlnaHQ6IDQwMCB9XG4gIGNvbnN0IHtcbiAgICBpbnRlcmFjdGlvbixcbiAgICBpbnRlcmFjdGFibGUsXG4gICAgZXZlbnQsXG4gICAgY29vcmRzLFxuICAgIHRhcmdldDogZWxlbWVudCxcbiAgfSA9IGhlbHBlcnMudGVzdEVudih7XG4gICAgcGx1Z2luczogW2F1dG9TdGFydCwgZHJhZ10sXG4gICAgcmVjdCxcbiAgfSlcblxuICBpbnRlcmFjdGFibGUuZHJhZ2dhYmxlKHRydWUpXG4gIGludGVyYWN0aW9uLnBvaW50ZXJUeXBlID0gY29vcmRzLnBvaW50ZXJUeXBlID0gJ21vdXNlJ1xuICBjb29yZHMuYnV0dG9ucyA9IDFcblxuICBpbnRlcmFjdGlvbi5wb2ludGVyRG93bihldmVudCwgZXZlbnQsIGVsZW1lbnQpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgaW50ZXJhY3Rpb24ucHJlcGFyZWQsXG4gICAgeyBuYW1lOiAnZHJhZycsIGF4aXM6ICd4eScsIGVkZ2VzOiB1bmRlZmluZWQgfSxcbiAgICAncHJlcGFyZXMgYWN0aW9uJ1xuICApXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgaW50ZXJhY3Rpb24ucmVjdCxcbiAgICByZWN0IGFzIGFueSxcbiAgICAnc2V0IGludGVyYWN0aW9uLnJlY3QnXG4gIClcblxuICB0LmVxdWFsKGVsZW1lbnQuc3R5bGUuY3Vyc29yLCAnbW92ZScsICdzZXRzIGRyYWcgY3Vyc29yJylcblxuICBsZXQgY2hlY2tlckFyZ3NcblxuICBpbnRlcmFjdGFibGUuZHJhZ2dhYmxlKHtcbiAgICBjdXJzb3JDaGVja2VyICguLi5hcmdzKSB7XG4gICAgICBjaGVja2VyQXJncyA9IGFyZ3NcblxuICAgICAgcmV0dXJuICdjdXN0b20tY3Vyc29yJ1xuICAgIH0sXG4gIH0pXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24oZXZlbnQsIGV2ZW50LCBlbGVtZW50KVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGNoZWNrZXJBcmdzLFxuICAgIFt7IG5hbWU6ICdkcmFnJywgYXhpczogJ3h5JyB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnRdLFxuICAgICdjYWxscyBjdXJzb3JDaGVja2VyIHdpdGggZXhwZWN0ZWQgYXJncydcbiAgKVxuXG4gIGludGVyYWN0aW9uLnBvaW50ZXJEb3duKGV2ZW50LCBldmVudCwgZWxlbWVudClcbiAgdC5lcXVhbChlbGVtZW50LnN0eWxlLmN1cnNvciwgJ2N1c3RvbS1jdXJzb3InLCAndXNlcyBjdXJzb3JDaGVja2VyIHZhbHVlJylcblxuICB0LmVuZCgpXG59KVxuIl19