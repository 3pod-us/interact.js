import test from '@interactjs/_dev/test/test';
import * as helpers from '@interactjs/core/tests/_helpers';
import pointerUtils from '@interactjs/utils/pointerUtils';
import drag from '../drag';
import drop from '../drop';
test('actions/drop options', t => {
    const scope = helpers.mockScope();
    scope.interact = {};
    scope.usePlugin(drop);
    const interactable = scope.interactables.new({ pointerType: 'test' });
    const funcs = Object.freeze({
        drop() { },
        activate() { },
        deactivate() { },
        dropmove() { },
        dragenter() { },
        dragleave() { },
    });
    interactable.dropzone({
        listeners: [funcs],
    });
    t.equal(interactable.events.types.drop[0], funcs.drop);
    t.equal(interactable.events.types.dropactivate[0], funcs.activate);
    t.equal(interactable.events.types.dropdeactivate[0], funcs.deactivate);
    t.equal(interactable.events.types.dropmove[0], funcs.dropmove);
    t.equal(interactable.events.types.dragenter[0], funcs.dragenter);
    t.equal(interactable.events.types.dragleave[0], funcs.dragleave);
    t.end();
});
test('actions/drop start', t => {
    const scope = helpers.mockScope();
    scope.interact = {};
    scope.usePlugin(drag);
    scope.usePlugin(drop);
    let interaction;
    const draggable = scope.interactables.new(scope.document.body).draggable({});
    const event = pointerUtils.coordsToEvent(pointerUtils.newCoords());
    t.doesNotThrow(() => {
        scope.interact.dynamicDrop(false);
        interaction = scope.interactions.new({});
        interaction.pointerDown(event, event, scope.document.body);
        interaction.start({ name: 'drag' }, draggable, scope.document.documentElement);
        interaction.move();
        interaction.end();
    }, 'no error with dynamicDrop === false');
    t.doesNotThrow(() => {
        interaction = scope.interactions.new({});
        scope.interact.dynamicDrop(true);
        interaction.pointerDown(event, event, scope.document.body);
        interaction.start({ name: 'drag' }, draggable, scope.document.documentElement);
        interaction.move();
        interaction.end();
    }, 'no error with dynamicDrop === true');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcC5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZHJvcC5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sS0FBSyxPQUFPLE1BQU0saUNBQWlDLENBQUE7QUFDMUQsT0FBTyxZQUFZLE1BQU0sZ0NBQWdDLENBQUE7QUFDekQsT0FBTyxJQUFJLE1BQU0sU0FBUyxDQUFBO0FBQzFCLE9BQU8sSUFBSSxNQUFNLFNBQVMsQ0FBQTtBQUUxQixJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxDQUFDLEVBQUU7SUFDL0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBQ2pDLEtBQUssQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFBO0lBQ25CLEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7SUFFckIsTUFBTSxZQUFZLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQTtJQUVyRSxNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzFCLElBQUksS0FBSyxDQUFDO1FBQ1YsUUFBUSxLQUFLLENBQUM7UUFDZCxVQUFVLEtBQUssQ0FBQztRQUNoQixRQUFRLEtBQUssQ0FBQztRQUNkLFNBQVMsS0FBSyxDQUFDO1FBQ2YsU0FBUyxLQUFLLENBQUM7S0FDaEIsQ0FBQyxDQUFBO0lBRUYsWUFBWSxDQUFDLFFBQVEsQ0FBQztRQUNwQixTQUFTLEVBQUUsQ0FBQyxLQUFLLENBQUM7S0FDbkIsQ0FBQyxDQUFBO0lBRUYsQ0FBQyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ3RELENBQUMsQ0FBQyxLQUFLLENBQUMs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QW9DLENBQUMsQ0FBQTtJQUV4QyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0ZXN0IGZyb20gJ0BpbnRlcmFjdGpzL19kZXYvdGVzdC90ZXN0J1xuaW1wb3J0ICogYXMgaGVscGVycyBmcm9tICdAaW50ZXJhY3Rqcy9jb3JlL3Rlc3RzL19oZWxwZXJzJ1xuaW1wb3J0IHBvaW50ZXJVdGlscyBmcm9tICdAaW50ZXJhY3Rqcy91dGlscy9wb2ludGVyVXRpbHMnXG5pbXBvcnQgZHJhZyBmcm9tICcuLi9kcmFnJ1xuaW1wb3J0IGRyb3AgZnJvbSAnLi4vZHJvcCdcblxudGVzdCgnYWN0aW9ucy9kcm9wIG9wdGlvbnMnLCB0ID0+IHtcbiAgY29uc3Qgc2NvcGUgPSBoZWxwZXJzLm1vY2tTY29wZSgpXG4gIHNjb3BlLmludGVyYWN0ID0ge31cbiAgc2NvcGUudXNlUGx1Z2luKGRyb3ApXG5cbiAgY29uc3QgaW50ZXJhY3RhYmxlID0gc2NvcGUuaW50ZXJhY3RhYmxlcy5uZXcoeyBwb2ludGVyVHlwZTogJ3Rlc3QnIH0pXG5cbiAgY29uc3QgZnVuY3MgPSBPYmplY3QuZnJlZXplKHtcbiAgICBkcm9wICgpIHt9LFxuICAgIGFjdGl2YXRlICgpIHt9LFxuICAgIGRlYWN0aXZhdGUgKCkge30sXG4gICAgZHJvcG1vdmUgKCkge30sXG4gICAgZHJhZ2VudGVyICgpIHt9LFxuICAgIGRyYWdsZWF2ZSAoKSB7fSxcbiAgfSlcblxuICBpbnRlcmFjdGFibGUuZHJvcHpvbmUoe1xuICAgIGxpc3RlbmVyczogW2Z1bmNzXSxcbiAgfSlcblxuICB0LmVxdWFsKGludGVyYWN0YWJsZS5ldmVudHMudHlwZXMuZHJvcFswXSwgZnVuY3MuZHJvcClcbiAgdC5lcXVhbChpbnRlcmFjdGFibGUuZXZlbnRzLnR5cGVzLmRyb3BhY3RpdmF0ZVswXSwgZnVuY3MuYWN0aXZhdGUpXG4gIHQuZXF1YWwoaW50ZXJhY3RhYmxlLmV2ZW50cy50eXBlcy5kcm9wZGVhY3RpdmF0ZVswXSwgZnVuY3MuZGVhY3RpdmF0ZSlcbiAgdC5lcXVhbChpbnRlcmFjdGFibGUuZXZlbnRzLnR5cGVzLmRyb3Btb3ZlWzBdLCBmdW5jcy5kcm9wbW92ZSlcbiAgdC5lcXVhbChpbnRlcmFjdGFibGUuZXZlbnRzLnR5cGVzLmRyYWdlbnRlclswXSwgZnVuY3MuZHJhZ2VudGVyKVxuICB0LmVxdWFsKGludGVyYWN0YWJsZS5ldmVudHMudHlwZXMuZHJhZ2xlYXZlWzBdLCBmdW5jcy5kcmFnbGVhdmUpXG5cbiAgdC5lbmQoKVxufSlcblxudGVzdCgnYWN0aW9ucy9kcm9wIHN0YXJ0JywgdCA9PiB7XG4gIGNvbnN0IHNjb3BlOiBJbnRlcmFjdC5TY29wZSA9IGhlbHBlcnMubW9ja1Njb3BlKClcbiAgc2NvcGUuaW50ZXJhY3QgPSB7fSBhcyBhbnlcbiAgc2NvcGUudXNlUGx1Z2luKGRyYWcpXG4gIHNjb3BlLnVzZVBsdWdpbihkcm9wKVxuXG4gIGxldCBpbnRlcmFjdGlvblxuICBjb25zdCBkcmFnZ2FibGUgPSBzY29wZS5pbnRlcmFjdGFibGVzLm5ldyhzY29wZS5kb2N1bWVudC5ib2R5KS5kcmFnZ2FibGUoe30pXG5cbiAgY29uc3QgZXZlbnQgPSBwb2ludGVyVXRpbHMuY29vcmRzVG9FdmVudChwb2ludGVyVXRpbHMubmV3Q29vcmRzKCkpXG5cbiAgdC5kb2VzTm90VGhyb3coKCkgPT4ge1xuICAgIHNjb3BlLmludGVyYWN0LmR5bmFtaWNEcm9wKGZhbHNlKVxuXG4gICAgaW50ZXJhY3Rpb24gPSBzY29wZS5pbnRlcmFjdGlvbnMubmV3KHt9KVxuICAgIGludGVyYWN0aW9uLnBvaW50ZXJEb3duKGV2ZW50LCBldmVudCwgc2NvcGUuZG9jdW1lbnQuYm9keSlcbiAgICBpbnRlcmFjdGlvbi5zdGFydCh7IG5hbWU6ICdkcmFnJyB9LCBkcmFnZ2FibGUsIHNjb3BlLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudClcbiAgICBpbnRlcmFjdGlvbi5tb3ZlKClcbiAgICBpbnRlcmFjdGlvbi5lbmQoKVxuICB9LCAnbm8gZXJyb3Igd2l0aCBkeW5hbWljRHJvcCA9PT0gZmFsc2UnKVxuXG4gIHQuZG9lc05vdFRocm93KCgpID0+IHtcbiAgICBpbnRlcmFjdGlvbiA9IHNjb3BlLmludGVyYWN0aW9ucy5uZXcoe30pXG4gICAgc2NvcGUuaW50ZXJhY3QuZHluYW1pY0Ryb3AodHJ1ZSlcbiAgICBpbnRlcmFjdGlvbi5wb2ludGVyRG93bihldmVudCwgZXZlbnQsIHNjb3BlLmRvY3VtZW50LmJvZHkpXG4gICAgaW50ZXJhY3Rpb24uc3RhcnQoeyBuYW1lOiAnZHJhZycgfSwgZHJhZ2dhYmxlLCBzY29wZS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpXG4gICAgaW50ZXJhY3Rpb24ubW92ZSgpXG4gICAgaW50ZXJhY3Rpb24uZW5kKClcbiAgfSwgJ25vIGVycm9yIHdpdGggZHluYW1pY0Ryb3AgPT09IHRydWUnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=