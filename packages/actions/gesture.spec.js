import test from '@interactjs/_dev/test/test';
import { ActionName } from '@interactjs/core/scope';
import * as helpers from '@interactjs/core/tests/_helpers';
import * as utils from '@interactjs/utils';
import gesture from './gesture';
function getGestureProps(event) {
    return helpers.getProps(event, ['type', 'angle', 'distance', 'scale', 'ds', 'da']);
}
test('gesture action init', t => {
    const scope = helpers.mockScope();
    scope.usePlugin(gesture);
    t.ok(scope.actions.names.includes(ActionName.Gesture), '"gesture" in actions.names');
    t.equal(scope.actions.methodDict.gesture, 'gesturable');
    t.equal(typeof scope.Interactable.prototype.gesturable, 'function');
    t.end();
});
test('Interactable.gesturable method', t => {
    const scope = helpers.mockScope();
    scope.usePlugin(gesture);
    const interaction = scope.interactions.new({});
    const element = scope.document.body;
    const interactable = scope.interactables.new(element).gesturable(true);
    const rect = Object.freeze({ top: 100, left: 200, bottom: 300, right: 400 });
    const touches = [
        utils.pointer.coordsToEvent(utils.pointer.newCoords()),
        utils.pointer.coordsToEvent(utils.pointer.newCoords()),
    ].map((touch, index) => Object.assign(touch.coords, {
        pointerId: index,
        client: touch.page,
    }) && touch);
    const events = [];
    interactable.rectChecker(() => ({ ...rect }));
    interactable.on('gesturestart gesturemove gestureend', (event) => {
        events.push(event);
    });
    // 0 --> 1
    utils.extend(touches[0].page, { x: 0, y: 0 });
    utils.extend(touches[1].page, { x: 100, y: 0 });
    interaction.pointerDown(touches[0], touches[0], element);
    t.notOk(gesture.checker(touches[0], touches[0], interactable, element, interaction), 'not allowed with 1 pointer');
    interaction.pointerDown(touches[1], touches[1], element);
    t.ok(gesture.checker(touches[1], touches[1], interactable, element, interaction), 'allowed with 2 pointers');
    interaction.start({ name: ActionName.Gesture }, interactable, element);
    t.deepEqual(interaction.gesture, {
        angle: 0,
        distance: 100,
        scale: 1,
        startAngle: 0,
        startDistance: 100,
    }, 'start interaction properties are correct');
    t.deepEqual(getGestureProps(events[0]), {
        type: 'gesturestart',
        angle: 0,
        distance: 100,
        scale: 1,
        ds: 0,
        da: 0,
    }, 'start event properties are correct');
    // 0
    // |
    // v
    // 1
    utils.extend(touches[1].page, { x: 0, y: 50 });
    interaction.pointerMove(touches[1], touches[1], element);
    t.deepEqual(interaction.gesture, {
        angle: 90,
        distance: 50,
        scale: 0.5,
        startAngle: 0,
        startDistance: 100,
    }, 'move interaction properties are correct');
    t.deepEqual(getGestureProps(events[1]), {
        type: 'gesturemove',
        angle: 90,
        distance: 50,
        scale: 0.5,
        ds: -0.5,
        da: 90,
    }, 'move event properties are correct');
    // 1 <-- 0
    utils.extend(touches[0].page, { x: 50, y: 50 });
    interaction.pointerMove(touches[0], touches[0], element);
    t.deepEqual(interaction.gesture, {
        angle: 180,
        distance: 50,
        scale: 0.5,
        startAngle: 0,
        startDistance: 100,
    }, 'move interaction properties are correct');
    t.deepEqual(getGestureProps(events[2]), {
        type: 'gesturemove',
        angle: 180,
        distance: 50,
        scale: 0.5,
        ds: 0,
        da: 90,
    }, 'move event properties are correct');
    interaction.pointerUp(touches[1], touches[1], element, element);
    t.deepEqual(interaction.gesture, {
        angle: 180,
        distance: 50,
        scale: 0.5,
        startAngle: 0,
        startDistance: 100,
    }, 'move interaction properties are correct');
    t.deepEqual(getGestureProps(events[3]), {
        type: 'gestureend',
        angle: 180,
        distance: 50,
        scale: 0.5,
        ds: 0,
        da: 0,
    }, 'end event properties are correct');
    // 0
    // |
    // v
    // 1
    interaction.pointerDown(touches[1], touches[1], element);
    utils.extend(touches[0].page, { x: 0, y: -150 });
    interaction.pointerMove(touches[1], touches[1], element);
    t.ok(gesture.checker(touches[0], touches[0], interactable, element, interaction), 'not allowed with re-added second pointers');
    interaction.start({ name: ActionName.Gesture }, interactable, element);
    t.deepEqual(interaction.gesture, {
        angle: 90,
        distance: 200,
        scale: 1,
        startAngle: 90,
        startDistance: 200,
    }, 'move interaction properties are correct');
    t.deepEqual(getGestureProps(events[4]), {
        type: 'gesturestart',
        angle: 90,
        distance: 200,
        scale: 1,
        ds: 0,
        da: 0,
    }, 'second start event properties are correct');
    t.equal(events.length, 5, 'correct number of events fired');
    t.end();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VzdHVyZS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZ2VzdHVyZS5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sSUFBSSxNQUFNLDRCQUE0QixDQUFBO0FBQzdDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQTtBQUNuRCxPQUFPLEtBQUssT0FBTyxNQUFNLGlDQUFpQyxDQUFBO0FBQzFELE9BQU8sS0FBSyxLQUFLLE1BQU0sbUJBQW1CLENBQUE7QUFDMUMsT0FBTyxPQUFPLE1BQU0sV0FBVyxDQUFBO0FBRS9CLFNBQVMsZUFBZSxDQUFFLEtBQTRCO0lBQ3BELE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUE7QUFDcEYsQ0FBQztBQUVELElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUMsRUFBRTtJQUM5QixNQUFNLEtBQUssR0FBbUIsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFBO0lBRWpELEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7SUFFeEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFLDRCQUE0QixDQUFDLENBQUE7SUFDcEYsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUE7SUFDdkQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQTtJQUVuRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUE7QUFDVCxDQUFDLENBQUMsQ0FBQTtB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SyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUE7SUFFdEUsQ0FBQyxDQUFDLFNBQVMsQ0FDVCxXQUFXLENBQUMsT0FBTyxFQUNuQjtRQUNFLEtBQUssRUFBRSxFQUFFO1FBQ1QsUUFBUSxFQUFFLEdBQUc7UUFDYixLQUFLLEVBQUUsQ0FBQztRQUNSLFVBQVUsRUFBRSxFQUFFO1FBQ2QsYUFBYSxFQUFFLEdBQUc7S0FDbkIsRUFDRCx5Q0FBeUMsQ0FBQyxDQUFBO0lBRTVDLENBQUMsQ0FBQyxTQUFTLENBQ1QsZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMxQjtRQUNFLElBQUksRUFBRSxjQUFjO1FBQ3BCLEtBQUssRUFBRSxFQUFFO1FBQ1QsUUFBUSxFQUFFLEdBQUc7UUFDYixLQUFLLEVBQUUsQ0FBQztRQUNSLEVBQUUsRUFBRSxDQUFDO1FBQ0wsRUFBRSxFQUFFLENBQUM7S0FDTixFQUNELDJDQUEyQyxDQUFDLENBQUE7SUFFOUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxnQ0FBZ0MsQ0FBQyxDQUFBO0lBRTNELENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQTtBQUNULENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRlc3QgZnJvbSAnQGludGVyYWN0anMvX2Rldi90ZXN0L3Rlc3QnXG5pbXBvcnQgeyBBY3Rpb25OYW1lIH0gZnJvbSAnQGludGVyYWN0anMvY29yZS9zY29wZSdcbmltcG9ydCAqIGFzIGhlbHBlcnMgZnJvbSAnQGludGVyYWN0anMvY29yZS90ZXN0cy9faGVscGVycydcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJ0BpbnRlcmFjdGpzL3V0aWxzJ1xuaW1wb3J0IGdlc3R1cmUgZnJvbSAnLi9nZXN0dXJlJ1xuXG5mdW5jdGlvbiBnZXRHZXN0dXJlUHJvcHMgKGV2ZW50OiBJbnRlcmFjdC5HZXN0dXJlRXZlbnQpIHtcbiAgcmV0dXJuIGhlbHBlcnMuZ2V0UHJvcHMoZXZlbnQsIFsndHlwZScsICdhbmdsZScsICdkaXN0YW5jZScsICdzY2FsZScsICdkcycsICdkYSddKVxufVxuXG50ZXN0KCdnZXN0dXJlIGFjdGlvbiBpbml0JywgdCA9PiB7XG4gIGNvbnN0IHNjb3BlOiBJbnRlcmFjdC5TY29wZSA9IGhlbHBlcnMubW9ja1Njb3BlKClcblxuICBzY29wZS51c2VQbHVnaW4oZ2VzdHVyZSlcblxuICB0Lm9rKHNjb3BlLmFjdGlvbnMubmFtZXMuaW5jbHVkZXMoQWN0aW9uTmFtZS5HZXN0dXJlKSwgJ1wiZ2VzdHVyZVwiIGluIGFjdGlvbnMubmFtZXMnKVxuICB0LmVxdWFsKHNjb3BlLmFjdGlvbnMubWV0aG9kRGljdC5nZXN0dXJlLCAnZ2VzdHVyYWJsZScpXG4gIHQuZXF1YWwodHlwZW9mIHNjb3BlLkludGVyYWN0YWJsZS5wcm90b3R5cGUuZ2VzdHVyYWJsZSwgJ2Z1bmN0aW9uJylcblxuICB0LmVuZCgpXG59KVxuXG50ZXN0KCdJbnRlcmFjdGFibGUuZ2VzdHVyYWJsZSBtZXRob2QnLCB0ID0+IHtcbiAgY29uc3Qgc2NvcGU6IEludGVyYWN0LlNjb3BlID0gaGVscGVycy5tb2NrU2NvcGUoKVxuXG4gIHNjb3BlLnVzZVBsdWdpbihnZXN0dXJlKVxuXG4gIGNvbnN0IGludGVyYWN0aW9uID0gc2NvcGUuaW50ZXJhY3Rpb25zLm5ldyh7fSlcbiAgY29uc3QgZWxlbWVudCA9IHNjb3BlLmRvY3VtZW50LmJvZHlcbiAgY29uc3QgaW50ZXJhY3RhYmxlID0gc2NvcGUuaW50ZXJhY3RhYmxlcy5uZXcoZWxlbWVudCkuZ2VzdHVyYWJsZSh0cnVlKVxuICBjb25zdCByZWN0ID0gT2JqZWN0LmZyZWV6ZSh7IHRvcDogMTAwLCBsZWZ0OiAyMDAsIGJvdHRvbTogMzAwLCByaWdodDogNDAwIH0pXG4gIGNvbnN0IHRvdWNoZXMgPSBbXG4gICAgdXRpbHMucG9pbnRlci5jb29yZHNUb0V2ZW50KHV0aWxzLnBvaW50ZXIubmV3Q29vcmRzKCkpLFxuICAgIHV0aWxzLnBvaW50ZXIuY29vcmRzVG9FdmVudCh1dGlscy5wb2ludGVyLm5ld0Nvb3JkcygpKSxcbiAgXS5tYXAoXG4gICAgKHRvdWNoLCBpbmRleCkgPT4gT2JqZWN0LmFzc2lnbih0b3VjaC5jb29yZHMsIHtcbiAgICAgIHBvaW50ZXJJZDogaW5kZXgsXG4gICAgICBjbGllbnQ6IHRvdWNoLnBhZ2UsXG4gICAgfSkgJiYgdG91Y2hcbiAgKVxuICBjb25zdCBldmVudHM6IEludGVyYWN0Lkdlc3R1cmVFdmVudFtdID0gW11cblxuICBpbnRlcmFjdGFibGUucmVjdENoZWNrZXIoKCkgPT4gKHsgLi4ucmVjdCB9KSlcbiAgaW50ZXJhY3RhYmxlLm9uKCdnZXN0dXJlc3RhcnQgZ2VzdHVyZW1vdmUgZ2VzdHVyZWVuZCcsIChldmVudDogSW50ZXJhY3QuR2VzdHVyZUV2ZW50KSA9PiB7XG4gICAgZXZlbnRzLnB1c2goZXZlbnQpXG4gIH0pXG5cbiAgLy8gMCAtLT4gMVxuICB1dGlscy5leHRlbmQodG91Y2hlc1swXS5wYWdlLCB7IHg6IDAsIHk6IDAgfSlcbiAgdXRpbHMuZXh0ZW5kKHRvdWNoZXNbMV0ucGFnZSwgeyB4OiAxMDAsIHk6IDAgfSlcblxuICBpbnRlcmFjdGlvbi5wb2ludGVyRG93bih0b3VjaGVzWzBdLCB0b3VjaGVzWzBdLCBlbGVtZW50KVxuXG4gIHQubm90T2soXG4gICAgZ2VzdHVyZS5jaGVja2VyKHRvdWNoZXNbMF0sIHRvdWNoZXNbMF0sIGludGVyYWN0YWJsZSwgZWxlbWVudCwgaW50ZXJhY3Rpb24pLFxuICAgICdub3QgYWxsb3dlZCB3aXRoIDEgcG9pbnRlcicsXG4gIClcblxuICBpbnRlcmFjdGlvbi5wb2ludGVyRG93bih0b3VjaGVzWzFdLCB0b3VjaGVzWzFdLCBlbGVtZW50KVxuXG4gIHQub2soXG4gICAgZ2VzdHVyZS5jaGVja2VyKHRvdWNoZXNbMV0sIHRvdWNoZXNbMV0sIGludGVyYWN0YWJsZSwgZWxlbWVudCwgaW50ZXJhY3Rpb24pLFxuICAgICdhbGxvd2VkIHdpdGggMiBwb2ludGVycycsXG4gIClcblxuICBpbnRlcmFjdGlvbi5zdGFydCh7IG5hbWU6IEFjdGlvbk5hbWUuR2VzdHVyZSB9LCBpbnRlcmFjdGFibGUsIGVsZW1lbnQpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgaW50ZXJhY3Rpb24uZ2VzdHVyZSxcbiAgICB7XG4gICAgICBhbmdsZTogMCxcbiAgICAgIGRpc3RhbmNlOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICBzdGFydERpc3RhbmNlOiAxMDAsXG4gICAgfSxcbiAgICAnc3RhcnQgaW50ZXJhY3Rpb24gcHJvcGVydGllcyBhcmUgY29ycmVjdCcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgZ2V0R2VzdHVyZVByb3BzKGV2ZW50c1swXSksXG4gICAge1xuICAgICAgdHlwZTogJ2dlc3R1cmVzdGFydCcsXG4gICAgICBhbmdsZTogMCxcbiAgICAgIGRpc3RhbmNlOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIGRzOiAwLFxuICAgICAgZGE6IDAsXG4gICAgfSxcbiAgICAnc3RhcnQgZXZlbnQgcHJvcGVydGllcyBhcmUgY29ycmVjdCcpXG5cbiAgLy8gMFxuICAvLyB8XG4gIC8vIHZcbiAgLy8gMVxuICB1dGlscy5leHRlbmQodG91Y2hlc1sxXS5wYWdlLCB7IHg6IDAsIHk6IDUwIH0pXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlck1vdmUodG91Y2hlc1sxXSwgdG91Y2hlc1sxXSwgZWxlbWVudClcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5nZXN0dXJlLFxuICAgIHtcbiAgICAgIGFuZ2xlOiA5MCxcbiAgICAgIGRpc3RhbmNlOiA1MCxcbiAgICAgIHNjYWxlOiAwLjUsXG4gICAgICBzdGFydEFuZ2xlOiAwLFxuICAgICAgc3RhcnREaXN0YW5jZTogMTAwLFxuICAgIH0sXG4gICAgJ21vdmUgaW50ZXJhY3Rpb24gcHJvcGVydGllcyBhcmUgY29ycmVjdCcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgZ2V0R2VzdHVyZVByb3BzKGV2ZW50c1sxXSksXG4gICAge1xuICAgICAgdHlwZTogJ2dlc3R1cmVtb3ZlJyxcbiAgICAgIGFuZ2xlOiA5MCxcbiAgICAgIGRpc3RhbmNlOiA1MCxcbiAgICAgIHNjYWxlOiAwLjUsXG4gICAgICBkczogLTAuNSxcbiAgICAgIGRhOiA5MCxcbiAgICB9LFxuICAgICdtb3ZlIGV2ZW50IHByb3BlcnRpZXMgYXJlIGNvcnJlY3QnKVxuXG4gIC8vIDEgPC0tIDBcbiAgdXRpbHMuZXh0ZW5kKHRvdWNoZXNbMF0ucGFnZSwgeyB4OiA1MCwgeTogNTAgfSlcbiAgaW50ZXJhY3Rpb24ucG9pbnRlck1vdmUodG91Y2hlc1swXSwgdG91Y2hlc1swXSwgZWxlbWVudClcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5nZXN0dXJlLFxuICAgIHtcbiAgICAgIGFuZ2xlOiAxODAsXG4gICAgICBkaXN0YW5jZTogNTAsXG4gICAgICBzY2FsZTogMC41LFxuICAgICAgc3RhcnRBbmdsZTogMCxcbiAgICAgIHN0YXJ0RGlzdGFuY2U6IDEwMCxcbiAgICB9LFxuICAgICdtb3ZlIGludGVyYWN0aW9uIHByb3BlcnRpZXMgYXJlIGNvcnJlY3QnKVxuXG4gIHQuZGVlcEVxdWFsKFxuICAgIGdldEdlc3R1cmVQcm9wcyhldmVudHNbMl0pLFxuICAgIHtcbiAgICAgIHR5cGU6ICdnZXN0dXJlbW92ZScsXG4gICAgICBhbmdsZTogMTgwLFxuICAgICAgZGlzdGFuY2U6IDUwLFxuICAgICAgc2NhbGU6IDAuNSxcbiAgICAgIGRzOiAwLFxuICAgICAgZGE6IDkwLFxuICAgIH0sXG4gICAgJ21vdmUgZXZlbnQgcHJvcGVydGllcyBhcmUgY29ycmVjdCcpXG5cbiAgaW50ZXJhY3Rpb24ucG9pbnRlclVwKHRvdWNoZXNbMV0sIHRvdWNoZXNbMV0sIGVsZW1lbnQsIGVsZW1lbnQpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgaW50ZXJhY3Rpb24uZ2VzdHVyZSxcbiAgICB7XG4gICAgICBhbmdsZTogMTgwLFxuICAgICAgZGlzdGFuY2U6IDUwLFxuICAgICAgc2NhbGU6IDAuNSxcbiAgICAgIHN0YXJ0QW5nbGU6IDAsXG4gICAgICBzdGFydERpc3RhbmNlOiAxMDAsXG4gICAgfSxcbiAgICAnbW92ZSBpbnRlcmFjdGlvbiBwcm9wZXJ0aWVzIGFyZSBjb3JyZWN0JylcblxuICB0LmRlZXBFcXVhbChcbiAgICBnZXRHZXN0dXJlUHJvcHMoZXZlbnRzWzNdKSxcbiAgICB7XG4gICAgICB0eXBlOiAnZ2VzdHVyZWVuZCcsXG4gICAgICBhbmdsZTogMTgwLFxuICAgICAgZGlzdGFuY2U6IDUwLFxuICAgICAgc2NhbGU6IDAuNSxcbiAgICAgIGRzOiAwLFxuICAgICAgZGE6IDAsXG4gICAgfSxcbiAgICAnZW5kIGV2ZW50IHByb3BlcnRpZXMgYXJlIGNvcnJlY3QnKVxuXG4gIC8vIDBcbiAgLy8gfFxuICAvLyB2XG4gIC8vIDFcbiAgaW50ZXJhY3Rpb24ucG9pbnRlckRvd24odG91Y2hlc1sxXSwgdG91Y2hlc1sxXSwgZWxlbWVudClcbiAgdXRpbHMuZXh0ZW5kKHRvdWNoZXNbMF0ucGFnZSwgeyB4OiAwLCB5OiAtMTUwIH0pXG4gIGludGVyYWN0aW9uLnBvaW50ZXJNb3ZlKHRvdWNoZXNbMV0sIHRvdWNoZXNbMV0sIGVsZW1lbnQpXG5cbiAgdC5vayhcbiAgICBnZXN0dXJlLmNoZWNrZXIodG91Y2hlc1swXSwgdG91Y2hlc1swXSwgaW50ZXJhY3RhYmxlLCBlbGVtZW50LCBpbnRlcmFjdGlvbiksXG4gICAgJ25vdCBhbGxvd2VkIHdpdGggcmUtYWRkZWQgc2Vjb25kIHBvaW50ZXJzJyxcbiAgKVxuXG4gIGludGVyYWN0aW9uLnN0YXJ0KHsgbmFtZTogQWN0aW9uTmFtZS5HZXN0dXJlIH0sIGludGVyYWN0YWJsZSwgZWxlbWVudClcblxuICB0LmRlZXBFcXVhbChcbiAgICBpbnRlcmFjdGlvbi5nZXN0dXJlLFxuICAgIHtcbiAgICAgIGFuZ2xlOiA5MCxcbiAgICAgIGRpc3RhbmNlOiAyMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIHN0YXJ0QW5nbGU6IDkwLFxuICAgICAgc3RhcnREaXN0YW5jZTogMjAwLFxuICAgIH0sXG4gICAgJ21vdmUgaW50ZXJhY3Rpb24gcHJvcGVydGllcyBhcmUgY29ycmVjdCcpXG5cbiAgdC5kZWVwRXF1YWwoXG4gICAgZ2V0R2VzdHVyZVByb3BzKGV2ZW50c1s0XSksXG4gICAge1xuICAgICAgdHlwZTogJ2dlc3R1cmVzdGFydCcsXG4gICAgICBhbmdsZTogOTAsXG4gICAgICBkaXN0YW5jZTogMjAwLFxuICAgICAgc2NhbGU6IDEsXG4gICAgICBkczogMCxcbiAgICAgIGRhOiAwLFxuICAgIH0sXG4gICAgJ3NlY29uZCBzdGFydCBldmVudCBwcm9wZXJ0aWVzIGFyZSBjb3JyZWN0JylcblxuICB0LmVxdWFsKGV2ZW50cy5sZW5ndGgsIDUsICdjb3JyZWN0IG51bWJlciBvZiBldmVudHMgZmlyZWQnKVxuXG4gIHQuZW5kKClcbn0pXG4iXX0=