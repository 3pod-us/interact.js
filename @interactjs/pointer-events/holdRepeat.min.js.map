{
	"version": 3,
	"sources": [
		"holdRepeat.ts"
	],
	"names": [
		"basePlugin",
		"PointerEvent",
		"endHoldRepeat",
		"interaction",
		"holdIntervalHandle",
		"clearInterval",
		"holdRepeat",
		"id",
		"install",
		"scope",
		"usePlugin",
		"pointerEvents",
		"defaults",
		"holdRepeatInterval",
		"types",
		"holdrepeat",
		"actions",
		"phaselessTypes",
		"listeners",
		"reduce",
		"acc",
		"enderTypes",
		"pointerEvents:new",
		"pointerEvent",
		"type",
		"count",
		"pointerEvents:fired",
		"eventTarget",
		"targets",
		"length",
		"interval",
		"eventable",
		"options",
		"setTimeout",
		"fire",
		"pointer",
		"event"
	],
	"mappings": "OACOA,MAAgB,uBAChBC,MAAkB,wBA8DzB,SAASC,GAAeC,YAAEA,IAGpBA,EAAYC,qBACdC,cAAcF,EAAYC,oBAC1BD,EAAYC,mBAAqB,MAIrC,MAAME,EAA8B,CAClCC,GAAI,4BACJC,QArDF,SAAkBC,GAChBA,EAAMC,UAAUV,GAEhB,MAAMW,cACJA,GACEF,EAGJE,EAAcC,SAASC,mBAAqB,EAC5CF,EAAcG,MAAMC,WAAaN,EAAMO,QAAQC,eAAeF,YAAa,GA6C3EG,UAAW,CAAC,OAAQ,KAAM,SAAU,UAAUC,OAC5C,CAACC,EAAKC,KACHD,EAAa,iBAAgBC,KAAgBnB,EACvCkB,GAET,CACEE,oBAhDN,UAAgBC,aAAEA,IACU,SAAtBA,EAAaC,OAEjBD,EAAaE,OAASF,EAAaE,OAAS,GAAK,IA8C7CC,sBA3CN,UACEvB,YAAEA,EAAFoB,aAAeA,EAAfI,YAA6BA,EAA7BC,QAA0CA,GAC1CnB,GAEA,GAA0B,SAAtBc,EAAaC,OAAoBI,EAAQC,OAAU,OAGvD,MAAMC,EAAWF,EAAQ,GAAGG,UAAUC,QAAQnB,mBAG1CiB,GAAY,IAGhB3B,EAAYC,mBAAqB6B,WAAW,KAC1CxB,EAAME,cAAcuB,KAAK,CACvB/B,YAAAA,EACAwB,YAAAA,EACAH,KAAM,OACNW,QAASZ,EACTa,MAAOb,GACNd,IACFqB,uBA2BUxB",
	"sourcesContent": [
		"import { ListenerMap } from '@interactjs/core/scope'\nimport basePlugin from './base'\nimport PointerEvent from './PointerEvent'\n\ndeclare module '@interactjs/core/Interaction' {\n  interface Interaction {\n    holdIntervalHandle?: any\n  }\n}\n\ndeclare module '@interactjs/pointer-events/PointerEvent' {\n  interface PointerEvent<T extends string = any> {\n    count?: number\n  }\n}\n\ndeclare module '@interactjs/pointer-events/base' {\n  interface PointerEventOptions {\n    holdRepeatInterval?: number\n  }\n}\n\nfunction install (scope: Interact.Scope) {\n  scope.usePlugin(basePlugin)\n\n  const {\n    pointerEvents,\n  } = scope\n\n  // don't repeat by default\n  pointerEvents.defaults.holdRepeatInterval = 0\n  pointerEvents.types.holdrepeat = scope.actions.phaselessTypes.holdrepeat = true\n}\n\nfunction onNew ({ pointerEvent }: { pointerEvent: PointerEvent<any> }) {\n  if (pointerEvent.type !== 'hold') { return }\n\n  pointerEvent.count = (pointerEvent.count || 0) + 1\n}\n\nfunction onFired (\n  { interaction, pointerEvent, eventTarget, targets }: Interact.SignalArgs['pointerEvents:fired'],\n  scope: Interact.Scope,\n) {\n  if (pointerEvent.type !== 'hold' || !targets.length) { return }\n\n  // get the repeat interval from the first eventable\n  const interval = targets[0].eventable.options.holdRepeatInterval\n\n  // don't repeat if the interval is 0 or less\n  if (interval <= 0) { return }\n\n  // set a timeout to fire the holdrepeat event\n  interaction.holdIntervalHandle = setTimeout(() => {\n    scope.pointerEvents.fire({\n      interaction,\n      eventTarget,\n      type: 'hold',\n      pointer: pointerEvent,\n      event: pointerEvent,\n    }, scope)\n  }, interval)\n}\n\nfunction endHoldRepeat ({ interaction }: { interaction: Interact.Interaction }) {\n  // set the interaction's holdStopTime property\n  // to stop further holdRepeat events\n  if (interaction.holdIntervalHandle) {\n    clearInterval(interaction.holdIntervalHandle)\n    interaction.holdIntervalHandle = null\n  }\n}\n\nconst holdRepeat: Interact.Plugin = {\n  id: 'pointer-events/holdRepeat',\n  install,\n  listeners: ['move', 'up', 'cancel', 'endall'].reduce(\n    (acc, enderTypes) => {\n      (acc as any)[`pointerEvents:${enderTypes}`] = endHoldRepeat\n      return acc\n    },\n    {\n      'pointerEvents:new': onNew,\n      'pointerEvents:fired': onFired,\n    } as ListenerMap,\n  ),\n}\n\nexport default holdRepeat\n"
	]
}