{
	"version": 3,
	"sources": [
		"arr.ts"
	],
	"names": [
		"contains",
		"array",
		"target",
		"indexOf",
		"remove",
		"splice",
		"merge",
		"source",
		"item",
		"push",
		"from",
		"findIndex",
		"func",
		"i",
		"length",
		"find"
	],
	"mappings": "OAEO,SAASA,SAAaC,EAAYC,GACvC,OAAkC,IAA3BD,EAAME,QAAQD,UAGhB,SAASE,OAAWH,EAAYC,GACrC,OAAOD,EAAMI,OAAOJ,EAAME,QAAQD,GAAS,UAGtC,SAASI,MAAaJ,EAAsBK,GACjD,IAAK,MAAMC,KAAQD,EACjBL,EAAOO,KAAKD,GAGd,OAAON,SAGF,SAASQ,KAAeH,GAC7B,OAAOD,MAAM,GAAWC,UAGnB,SAASI,UAAcV,EAAYW,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIZ,EAAMa,OAAQD,IAChC,GAAID,EAAKX,EAAMY,GAAIA,EAAGZ,GACpB,OAAOY,EAIX,OAAQ,SAGH,SAASE,KAAed,EAAYW,GACzC,OAAOX,EAAMU,UAAUV,EAAOW",
	"sourcesContent": [
		"type Filter<T> = (element: T, index: number, array: T[]) => boolean\n\nexport function contains<T> (array: T[], target: T) {\n  return array.indexOf(target) !== -1\n}\n\nexport function remove<T> (array: T[], target: T) {\n  return array.splice(array.indexOf(target), 1)\n}\n\nexport function merge<T, U> (target: Array<T | U>, source: U[]) {\n  for (const item of source) {\n    target.push(item)\n  }\n\n  return target\n}\n\nexport function from<T = any> (source: ArrayLike<T>) {\n  return merge([] as T[], source as T[])\n}\n\nexport function findIndex<T> (array: T[], func: Filter<T>) {\n  for (let i = 0; i < array.length; i++) {\n    if (func(array[i], i, array)) {\n      return i\n    }\n  }\n\n  return -1\n}\n\nexport function find<T = any> (array: T[], func: Filter<T>) {\n  return array[findIndex(array, func)]\n}\n"
	]
}